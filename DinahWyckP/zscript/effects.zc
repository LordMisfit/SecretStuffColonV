class RandomSpawner2 : RandomSpawner
{
	default
	{
		+DONTGIB
		+NOTIMEFREEZE
		-BLOCKEDBYSOLIDACTORS
	}
}

class CustomInventoryExt : CustomInventory
{
	action void A_UseAppleWine()
	{
		int currenthealth = player.mo.health;
		int maxhealth = (player.mo.SpawnHealth() + player.mo.stamina);
		bool willheal;
		bool useitem;
		
		if (player.mo.CountInv("AppleWine"))
		{
			if (!player.mo.CountInv("PowerWineBuffStrongestEven"))
			{
				if (!player.mo.CountInv("PowerWineBuffStrongest"))
				{
					if (!player.mo.CountInv("PowerWineBuffStrong"))
					{
						if (!player.mo.CountInv("PowerWineBuffWeak"))
						{
							player.mo.A_SetInventory("PowerWineBuffWeak",1);
							player.mo.A_SetInventory("PowerWineBuffStrong",0);
							player.mo.A_SetInventory("PowerWineBuffStrongest",0);
							player.mo.A_SetInventory("PowerWineBuffStrongestEven",0);
							A_Log("\c[purple]Defense Weakly Buffed (-18.75% damage taken for 5 seconds)!");
							if (random(1,4) <= 1) { A_StartSound("Dinah/giggle",CHAN_VOICE); }
							willheal = true;
							useitem = true;
						}
						else
						{
							player.mo.A_SetInventory("PowerWineBuffStrong",1);
							player.mo.A_SetInventory("PowerWineBuffWeak",0);
							player.mo.A_SetInventory("PowerWineBuffStrongest",0);
							player.mo.A_SetInventory("PowerWineBuffStrongestEven",0);
							A_Log("\c[purple]Defense Moderately Buffed (-37.5% damage taken for 7 seconds)!");
							if (random(1,4) <= 2) { A_StartSound("Dinah/giggle",CHAN_VOICE); }
							willheal = true;
							useitem = true;
						}
					}
					else
					{
						player.mo.A_SetInventory("PowerWineBuffStrongest",1);
						player.mo.A_SetInventory("PowerWineBuffStrongestEven",0);
						player.mo.A_SetInventory("PowerWineBuffStrong",0);
						player.mo.A_SetInventory("PowerWineBuffWeak",0);
						A_Log("\c[purple]Defense Greatly Buffed (-56.25% damage taken for 9 seconds)!");
						if (random(1,4) <= 3) { A_StartSound("Dinah/giggle",CHAN_VOICE); }
						willheal = true;
						useitem = true;
					}
				}
				else
				{
					player.mo.A_SetInventory("PowerWineBuffStrongestEven",1);
					player.mo.A_SetInventory("PowerWineBuffStrongest",0);
					player.mo.A_SetInventory("PowerWineBuffStrong",0);
					player.mo.A_SetInventory("PowerWineBuffWeak",0);
					A_Log("\c[purple]Defense Immensely Buffed (-75% damage taken for 12 seconds)!");
					A_StartSound("Dinah/giggle",CHAN_VOICE);
					willheal = true;
					useitem = true;
				}
			}
			
			if (useitem)
			{
				if (willheal)
				{
					if (currenthealth < maxhealth)
					{
						currenthealth += (maxhealth * frandom(0.18,0.22));
						if (currenthealth > maxhealth) currenthealth = maxhealth;
						player.health = player.mo.health = currenthealth;
					}
					else
					{
						currenthealth += (maxhealth * frandom(0.045,0.055));
						if (currenthealth > (maxhealth*3)) currenthealth = (maxhealth*3);
						player.health = player.mo.health = currenthealth;
					}
				}
				
				player.mo.A_StartSound("Dinah/drink",CHAN_BODY);
				player.mo.A_TakeInventory("AppleWine",1);
			}
			else
			{
				A_Log("\c[red]You can't drink any more Apple Wine for now!");
				player.mo.A_StartSound("Dinah/what",CHAN_VOICE);
			}
		}
	}
	
	action void A_UsePartyPopper()
	{
		invoker.A_FireBullets(15,2,8,10,"PopperPuff1");
		invoker.A_FireBullets(8,2,4,15,"PopperPuff2");
	}
}

// Used for a base item for all the items that don't do anything themselves but are used for/as detecting flags.
class PlaceholderItem : CustomInventoryExt
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 1;
		+INVENTORY.KEEPDEPLETED 
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class PlaceholderItemMax : PlaceholderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}



// Placeholder for Armor Class :V
class KnightGownItem : PlaceholderItem { default { Inventory.MaxAmount 1; } }
class KnightGownItem2 : PlaceholderItem { default { Inventory.MaxAmount 1; } }
class KnightGownItem3 : PlaceholderItem { default { Inventory.MaxAmount 1; } }
class KnightGownItem4 : PlaceholderItem { default { Inventory.MaxAmount 1; } }

class PowerWineBuffWeak : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.8125;
		Inventory.Icon "GBL1A0";
		Powerup.Duration -5;
		Powerup.Color "70 2c 52", 0.250;
	}
}

class PowerWineBuffStrong : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.625;
		Inventory.Icon "GBL2A0";
		Powerup.Duration -7;
		Powerup.Color "70 2c 52", 0.325;
	}
}

class PowerWineBuffStrongest : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.4375;
		Inventory.Icon "GBL3A0";
		Powerup.Duration -9;
		Powerup.Color "70 2c 52", 0.400;
	}
}

class PowerWineBuffStrongestEven : PowerProtection
{
	default
	{
		DamageFactor "Normal", 0.25;
		Inventory.Icon "GBL4A0";
		Powerup.Duration -12;
		Powerup.Color "70 2c 52", 0.450;
	}
}

class VacAmmoCounter : PlaceholderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}


class KillsCount : PlaceholderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class ExpPts : PlaceholderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class ExpPtsNeeded : PlaceholderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

class PlayerLevel : PlaceholderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}


class TimeFreezeTimer : PlaceholderItem
{
	default
	{
		inventory.icon "";
		Inventory.MaxAmount 0x7FFFFFFD;
		+INVENTORY.KEEPDEPLETED 
	}
}

// Keeps Sounds/Music active during time Freeze powerups
class TimeFreezerKeepSound : PowerTimeFreezer
{
	override void InitEffect()
	{
		Super.InitEffect();
		S_ResumeSound(false);
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
	}
	
	override void Tick()
	{
		Super.Tick();
		S_ResumeSound(false);
		EffectTics = 350;
	}
}

class TimePotionTimeFreezer : TimeFreezerKeepSound
{
	default
	{
		Powerup.Color "8f 8f 8f", 0.5;
	}

	override bool HandlePickup (Inventory item)
	{
		if (item.GetClass() == GetClass())
		{ // Setting EffectTics to 0 will force Powerup's HandlePickup()
		  // method to reset the tic count so you get the red flash again.
			EffectTics = 0;
		}
		return Super.HandlePickup (item);
	}

	int EffectTics2;
	int Dire;

	override void Tick ()
	{
		PowerTimeFreezer.Tick();
		S_ResumeSound(false);
		int Point1 = 128; // 32
		int Point2 = Point1 + 256; // 96
		int increment = (randompick(20,22,24,26,28) / 2);
		if (Dire == 0)
		{
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
			else if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
			else { Dire = random(1,2); }
		}
		//Console.Printf("EffectTics: %d, Dire: %d, increment: %d", EffectTics, Dire, increment);

		if (Dire == 1)
		{
			EffectTics += increment;
			if (EffectTics >= Point2) { EffectTics = Point2; Dire = 2; }
		}
		else
		if (Dire == 2)
		{
			EffectTics -= increment;
			if (EffectTics <= Point1) { EffectTics = Point1; Dire = 1; }
		}

		// Powerups cannot exist outside an inventory
		if (Owner == NULL) Destroy();
		if (EffectTics <= 0) Destroy();
	}

	override color GetBlend()
	{
		// slowly fade the tint out
		int cnt = 128 - (EffectTics>>3);

		//Console.Printf("cnt: %d / 256, BlendColor.a: %d", cnt, BlendColor.a*cnt/256);
		if (cnt > 0)
		{
			return Color(BlendColor.a*cnt/256,
				BlendColor.r, BlendColor.g, BlendColor.b);
		}
		return 0;
	}
}

class FullHealth : PlaceholderItem { }
class NormalHealth : PlaceholderItem { }
class DecentHealth : PlaceholderItem { }
class LowHealth : PlaceholderItem { } 
class CriticalHealth : PlaceholderItem { }
class PlayerIsDead : PlaceholderItem { }
class PlayerDeathFadeOut : PlaceholderItem { }

class PlayingDoom : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingHeretic : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingHexen : PlaceholderItem { } // This works as an inventory flag to indicate the game mode
class PlayingStrife : PlaceholderItem { } // This works as an inventory flag to indicate the game mode

