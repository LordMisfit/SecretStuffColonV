// Base class [for later use]
class DDBaseZSC : Actor
{
	// General
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;
	
	default
	{
		+CASTSPRITESHADOW;
		-NOSPRITESHADOW;
	}
	
	void A_Destroy()
	{
		self.Destroy();
	}
}

class DDCreature : DDBaseZSC
{
}

class ShieldPartBase : DDBaseZSC
{
	default
	{
		Species "Players";
		Health 2147483646;
		Painchance 256;
		Radius 16; // out of 32
		Height 32; // out of 32
		Scale 0.5;
		RenderStyle "Add"; // Add
		Alpha 0.0; // 0.003125
		+NOTARGET; 
		+NEVERTARGET;
		+BUDDHA;
		+DONTBLAST;
		+SOLID; //+SHOOTABLE;
		+NOGRAVITY;
		+NOTELEPORT;
		+NODAMAGE;
		+DONTRIP;
		+NOBLOOD;
		+NOBLOODDECALS;
		+FLOORCLIP;
		+NOTELESTOMP;
		+NOTIMEFREEZE;
		+THRUSPECIES;
		+MTHRUSPECIES;
	}

/*
	override void PostBeginPlay()
	{
		
		Super.PostBeginPlay();
	}
	
	override void Tick()
	{
		if (level.time % 2 == 0) bSOLID = true; else bSOLID = false;
		Super.Tick();
	}
*/

	override bool CanCollideWith(Actor other, bool passive)
	{
		PlayerPawn playpawn;
		PlayerPawn playpawn2;
		playpawn = PlayerPawn(other);

		bool debugshieldcollision = true;
		if (debugshieldcollision) Console.Printf("\cyShieldPart [%s] (gametic %d):\c- other: %s", GetClassName(), gametic, other.GetClassName());
		if (passive)
		{
			if (other.GetClassName() == "MalletShot" || 
					other.GetClassName() == "MalletShotBerserk" || 
					other.GetClassName() == "BlunderShot" || 
					other.GetClassName() == "EggShot" || 
					other.GetClassName() == "EggShotBerserk" || 
					other.GetClassName() == "EggGrenade" || 
					other.GetClassName() == "EggGrenadeBerserk" || 
					other.GetClassName() == "EggMini" || 
					other.GetClassName() == "EggMiniBerserk" || 
					other.GetClassName() == "ZapShot" || 
					other.GetClassName() == "MiniZapShot" || 
					other.GetClassName() == "JackShot" || 
					other.GetClassName() == "JackShotBerserk" || 
					other.GetClassName() == "RecordShot" || 
					other.GetClassName() == "VacShot" || 
					other.GetClassName() == "VacShot2" || 
					other.GetClassName() == "CherryBombShot" || 
					other.GetClassName() == "CherryBombShotBerserk" || 
					other.GetClassName() == "BRocketShot" || 
					other.GetClassName() == "BRocketBoom1" || 
					other.GetClassName() == "BRocketBoom2" || 
					other.GetClassName() == "Spinnershot" || 
					other.GetClassName() == "StreamerShot" || 
					other.GetClassName() == "Streamertrail" || 
					other.GetClassName() == "PopperPuff1" || 
					other.GetClassName() == "PopperPuff2" || 
					other.GetClassName() == "SnakeGrenade" || 
					other.GetClassName() == "SnakeMiniGrenade" || 
					other.GetClassName() == "") 
			{
					return false;
			}
			if (debugshieldcollision) Console.Printf("\cyShieldPart (gametic %d):\c- passive: %s", gametic, GetClassName());
			// Pass through different species of select types.
			if (playpawn) return false; // Player Checking

			if (other && other.bISMONSTER)
			{
				if (other.bFRIENDLY) return false;
				if (other.health <= 0) return false;
				let ShieldPiece = ShieldPartBase(other);
				if (ShieldPiece) return false;
				return true;
			}

			playpawn = PlayerPawn(other.target);
			playpawn2 = PlayerPawn(master);
			if (playpawn && playpawn2) return false;
		}
		else // Non-passive means the one moving into the other is performing the checks.
		{
			if (debugshieldcollision) Console.Printf("\cyShieldPart (gametic %d):\c- non-passive: %s", gametic, GetClassName());
			playpawn = PlayerPawn(other.target);
			playpawn2 = PlayerPawn(master);
			if (playpawn && playpawn2) return false;

			return true;
		}

		// We don't really care about others making the check.
		return true;
	}
}

class NoItemSpawn : DDBaseZSC // A special 'drop' that is meant to be an empty "drop" for use in droptables
{
	states
	{
		Spawn:
			TNT1 A 0 NoDelay A_Destroy();
			stop;
	}
}

class ShieldPart : ShieldPartBase // The Main segment of the sceptre-shield which deflects/blocks attacks
{
	default
	{
		+REFLECTIVE 
		+AIMREFLECT
	}
	States
	{
		Spawn:
			HEXA C 2 bright NoDelay 
			{
				A_FadeTo(0.25,0.25);
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain.Magic:
			TNT1 A 0;
			stop;
		Pain.Sceptre:
			TNT1 A 0;
			stop;
		Pain:
			TNT1 A 0 bright 
			{
				A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON);
				Console.Printf("#$G#");
			}
			stop;
		Death:
			TNT1 A 0;
			stop;
	}
}

class ShieldPartNoReflect : ShieldPart
{
	default
	{
		-REFLECTIVE
		-AIMREFLECT
	}
	States
	{
		Spawn:
			HEXA A 2 bright NoDelay
			{
				A_FadeTo(0.25,0.25);
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
	}
}
