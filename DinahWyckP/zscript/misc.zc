class PlayerStatItem : Inventory
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;

	int LevelCap;
	Array<int> LevelExpRequirement;

	int InitEXPTables;
	int PrevTimeFreezeTimer;
	int TimeFreeze;
	int TimeFreezeTimer;
	int CharacterClass;

	int HPRegenBonPenTimer;
	int HPRegenTimer;
	int HPDegenTimer;
	int HPRegenTimerMax;
	int HPDegenTimerMax;
	
	int PrevHealthRatio;
	int HealthRatio;
	int CurrentHealth;
	int MaxHealthTrue;
	int MaxHealthLimit;

	int TrueGameSkill;
	int CurrentArmorClass;
	int CurrentMaxArmor;
	int ArmorResistance;
	int ClassicDoomType;
	int ModType;
	int TotalMass;

	int PlayerLevel;
	int PlayerJUMP;
	
	int SurvivalRate;
	
	int SuperVacBagSize;
	
	int ClassCheck;
	
	int buttons;
	int FreezePlayer;
	int Player1TID;
	
	int StrifeStamLvl;
	int StrifeAccuLvl;

	default 
	{
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	override void DoEffect()
	{
		let playeractor = PlayerPawn(owner);
		if (!playeractor) // Removes itself if given to a Player Class
		{
			owner.A_SetInventory("PlayerStatItem",0); super.DoEffect(); 
		} 
		else
		if (playeractor) // Otherwise, Keep
		{
			if (playeractor.GetClassName() == "DinahPlayer") CharacterClass == 0;

			ClassicDoomType = gameinfo.gametype; // 0 = Unknown, 1 = Doom [any], 2 = Heretic, 4 = Hexen, 8 = Strife
			//Console.Printf("%d", ClassicDoomType);					if (ClassicDoomType == 0) { owner.A_SetInventory("PlayingDoom2",1); } // Doom 2
			if (ClassicDoomType & 1) { owner.A_SetInventory("PlayingDoom",1); } // Doom 1
			if (ClassicDoomType & 2) { owner.A_SetInventory("PlayingHeretic",1); } // Heretic
			if (ClassicDoomType & 4) { owner.A_SetInventory("PlayingHexen",1); } // HeXen
			if (ClassicDoomType & 8) { owner.A_SetInventory("PlayingStrife",1); } // Strife
			buttons = owner.GetPlayerInput(INPUT_BUTTONS);
			TrueGameSkill = skill;
			
			bool debugexptables = false;
			if (ClassCheck <= 6)
			{
				if (ClassCheck <= 1) 
				{
					PlayerLevel = 0;
					owner.A_SetInventory("PlayerLevel",PlayerLevel);
					LevelCap = 200;
					LevelExpRequirement.Resize((LevelCap+1));
					
					// EXP Tables
					if (InitEXPTables == 0)
					{
						double ExpValue;
						int BaseEXPRequirement = 25; // clamp(dydu_baseexprequirement, 250, 11200);
						BaseEXPRequirement *= (0.875 + (TrueGameSkill * 0.0625));

						double BaseExtra = 1; // clamp(dydu_baseexpextra, 0, 100);
						double BaseAccel1 = 6; // clamp(dydu_baseexpaccel1, 0, 100);
						double BaseAccel2 = 0.0384; // clamp(dydu_baseexpaccel2, 0.0, 5.0);
						double BaseMulti1 = 48; // clamp(dydu_expmulti1, 1, 1024);
						double BaseMulti2 = 50; // clamp(dydu_expmulti2, 1, 10000);
						
						double BaseMulti3 = 1.0;
						int baseval;
						int addval;
						double mulval;
						int preval = 0;
						
						double BaseMulti3b = 2.0;
						double BaseMulti4 = 1.0;
						double BaseMulti5 = 0.01;

						// Sets up the actual EXP requirement tables based from BaseEXPRequirement above.
						for (int CuLv = 0; CuLv < (LevelCap+1); CuLv++)
						{
							if (CuLv >= 0 && CuLv <= 31) BaseMulti4 = 1.0;
							if (CuLv >= 32 && CuLv <= 56) BaseMulti4 = 1.334;
							if (CuLv >= 57 && CuLv <= 80) BaseMulti4 = 1.667;
							if (CuLv >= 81 && CuLv <= 100) BaseMulti4 = 2;
							if (CuLv >= 101 && CuLv <= 109) BaseMulti4 = 4;
							if (CuLv >= 110 && CuLv <= 118) BaseMulti4 = 6;
							if (CuLv >= 119 && CuLv <= 127) BaseMulti4 = 8;
							if (CuLv >= 128 && CuLv <= 136) BaseMulti4 = 10;
							if (CuLv >= 137 && CuLv <= 145) BaseMulti4 = 12;
							if (CuLv >= 146 && CuLv <= 154) BaseMulti4 = 14;
							if (CuLv >= 155 && CuLv <= 163) BaseMulti4 = 16;
							if (CuLv >= 164 && CuLv <= 172) BaseMulti4 = 18;
							if (CuLv >= 173 && CuLv <= 181) BaseMulti4 = 20;
							if (CuLv >= 182 && CuLv <= 190) BaseMulti4 = 22;
							if (CuLv >= 191 && CuLv <= 199) BaseMulti4 = 24;
							if (CuLv >= 200) BaseMulti4 = 30.0;
							
							BaseMulti3 = (BaseMulti4 + (CuLv * ((BaseMulti4 * BaseMulti5) * BaseMulti3b)));
							
							baseval = BaseEXPRequirement * (((CuLv * BaseExtra) + 1));
							baseval *= (1.00 + ((CuLv + 1) * 0.000625));
							
							mulval = (((CuLv * (BaseAccel1 * ((BaseMulti1 + CuLv) / BaseMulti1))) + BaseMulti2) / BaseMulti2);
							addval = (((BaseEXPRequirement * (CuLv * BaseAccel2)) * BaseMulti3) * ((BaseMulti4) * 1.5));
							ExpValue = baseval;
							if (debugexptables) Console.Printf("ExpValue: %d (%d)", ExpValue, baseval);
							ExpValue *= mulval;
							if (debugexptables) Console.Printf("(*) ExpValue: %d (%.8f)", ExpValue, mulval);
							ExpValue += addval;
							if (debugexptables) Console.Printf("(+) ExpValue: %d (%d)", ExpValue, addval);
							
							if (CuLv > 0) preval = LevelExpRequirement[(CuLv-1)];
			
							if (debugexptables) Console.Printf("\czLevel \cy%d\c- \czEXP Requirement: \cy%d \cz(prev: \cy%d)\cz, Multi: %.8f, baseval: %d, mulval: %.8f, addval: %d, diff: %d\c-", CuLv, ExpValue, preval, BaseMulti3, baseval, mulval, addval, (ExpValue-preval));
							LevelExpRequirement[CuLv] = ExpValue;
						}
						if (debugexptables) Console.Printf("BaseEXPRequirement: %4f, BaseExtra: %4f / 100, BaseAccel1: %4f / 100, BaseAccel2: %3f / 25000, BaseMulti1: %3f / 1024, BaseMulti2: %3f / 10000", BaseEXPRequirement, BaseExtra, BaseAccel1, BaseAccel2, BaseMulti1, BaseMulti2);

						InitEXPTables++;
					}
				}
			}

			//
			// Leveling Up
			//
			owner.A_SetInventory("ExpPtsNeeded",LevelExpRequirement[(PlayerLevel)]);
			bool debuglevelup = false;
			int Experience = owner.CountInv("ExpPts");
			int levelmodulo, levelbonustype;
			int leveluptimes = 0;
			int leveluptimesmax = LevelCap - PlayerLevel;
			int StatIncrease;
			PlayerLevel = owner.CountInv("PlayerLevel");
			for (leveluptimes = 0; leveluptimes < leveluptimesmax; leveluptimes++)
			{
				if (debuglevelup) Console.Printf("%d / %d", leveluptimes, leveluptimesmax);
				if (Experience >= LevelExpRequirement[PlayerLevel])
				{
					if (PlayerLevel < LevelCap)
					{
						levelmodulo = PlayerLevel % 20;
						if (levelmodulo == 0) levelbonustype = 0;
						else if (levelmodulo == 4) levelbonustype = 1;
						else if (levelmodulo == 5) levelbonustype = randompick(2,2,2,2,1);
						else if (levelmodulo == 8) levelbonustype = 1;
						else if (levelmodulo == 10) levelbonustype = randompick(2,2,2,2,1);
						else if (levelmodulo == 12) levelbonustype = 1;
						else if (levelmodulo == 15) levelbonustype = randompick(2,2,2,2,1);
						else if (levelmodulo == 16) levelbonustype = 1;
						else levelbonustype = 2;
						
						// Health/HP Boost
						CurrentHealth = owner.health;
						int LevelAddMaxHP = 0;
						int HPMaxGain;
						int HPRandomizer1;

						HPMaxGain += randompick(1,1,1,1,2,2,3);
						if (levelbonustype == 0) HPMaxGain += randompick(1,1,2,2,2,3,3);
						if (levelbonustype == 1) HPMaxGain += randompick(1,1,1,2,2,2,3);
						if (levelbonustype == 2) HPMaxGain += randompick(0,0,0,0,1,1,2);
						if (TrueGameSkill <= SKILL_VERY_EASY) HPMaxGain += (MaxHealthTrue / 80); // 288
						if (TrueGameSkill == SKILL_EASY) HPMaxGain += (MaxHealthTrue / 90); // 360
						if (TrueGameSkill == SKILL_NORMAL) HPMaxGain += (MaxHealthTrue / 100); // 432
						if (TrueGameSkill == SKILL_HARD) HPMaxGain += (MaxHealthTrue / 110); // 504
						if (TrueGameSkill == SKILL_VERY_HARD) HPMaxGain += (MaxHealthTrue / 120); // 576
						owner.player.mo.stamina += HPMaxGain;
						owner.player.mo.health += HPMaxGain;
						MaxHealthTrue = (owner.spawnhealth() + owner.player.mo.stamina);

						PlayerLevel += 1;
						owner.A_StartSound("misc/bellring",101,CHANF_DEFAULT,frandom(0.6,0.75),ATTN_NORM,frandom(1.25,1.5));
						owner.A_SetInventory("PlayerLevel",PlayerLevel);
						owner.A_Print(String.Format("\c[Green]Congradulations, you've reached Level %d \c[brick][+%d HP]", PlayerLevel, HPMaxGain));
						owner.A_SetBlend("00 00 FF",0.3,3,"00 00 FF",0.0);
					}
				}
			}

			//
			// Super Vac Bagging
			//
			if (SuperVacBagSize <= 0) 
			{ 
				if (TrueGameSkill == SKILL_VERY_EASY) SuperVacBagSize = 240;
				if (TrueGameSkill == SKILL_EASY) SuperVacBagSize = 320;
				if (TrueGameSkill == SKILL_NORMAL) SuperVacBagSize = 400;
				if (TrueGameSkill == SKILL_HARD) SuperVacBagSize = 480;
				if (TrueGameSkill == SKILL_VERY_HARD) SuperVacBagSize = 560;
			}

			HPRegenTimerMax = 7000 - (owner.player.mo.stamina * 35);
			HPDegenTimerMax = 1750 + (owner.player.mo.stamina * 17.5);
			CurrentHealth = owner.player.mo.health;
			MaxHealthTrue = (owner.spawnhealth() + owner.player.mo.stamina);
			
			//
			// HP Regen/Degen
			//
			bool debughpregen = false;
			bool hpwillregen = true;
			bool hpwilldegen = true;
			if (CurrentHealth > 0)
			{
				if (debughpregen) Console.Printf("Health: %d / %d", CurrentHealth, MaxHealthTrue);
				
				//****************************************
				//*Get Health Ratio & Health Level Checks*
				//****************************************
				if (playeractor && MaxHealthTrue > 0)
				{
					HealthRatio = (CurrentHealth * 1000) / MaxHealthTrue;
					HealthRatio = clamp(HealthRatio, 0, 2000);
		
					if (CurrentHealth <= 0) { Owner.A_SetInventory("PlayerIsDead", 1); }
					else
					{
						Owner.A_SetInventory("PlayerIsDead", 0);
						if (HealthRatio != PrevHealthRatio)
						{
							if (HealthRatio < 625)
							{
								if (HealthRatio < 167)
								{
									if (HealthRatio < 21)
									{
										Owner.A_SetInventory("CriticalHealth", 1);
										Owner.A_SetInventory("LowHealth", 0);
										Owner.A_SetInventory("DecentHealth", 0);
										Owner.A_SetInventory("NormalHealth", 0);
									}
									else 
									{
										Owner.A_SetInventory("CriticalHealth", 0);
										Owner.A_SetInventory("LowHealth", 1);
										Owner.A_SetInventory("DecentHealth", 0);
										Owner.A_SetInventory("NormalHealth", 0);
									}
								}
								else 
								{
									Owner.A_SetInventory("CriticalHealth", 0);
									Owner.A_SetInventory("LowHealth", 0);
									Owner.A_SetInventory("DecentHealth", 1);
									Owner.A_SetInventory("NormalHealth", 0);
								}
							}
							else
							{
								Owner.A_SetInventory("CriticalHealth", 0);
								Owner.A_SetInventory("LowHealth", 0);
								Owner.A_SetInventory("DecentHealth", 0);
								Owner.A_SetInventory("NormalHealth", 1);
							}
							if (CurrentHealth >= MaxHealthTrue) Owner.A_SetInventory("FullHealth", 1); else Owner.A_SetInventory("FullHealth", 0);
							
							PrevHealthRatio = HealthRatio;
						}
					}
				}

				if (CurrentHealth < MaxHealthTrue)
				{
					if (hpwillregen)
					{
						int inc = 20 + (PlayerLevel * 0.05);

						if (owner.CountInv("PowerStrength")) inc = floor(inc * 4);

						if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) inc = floor(inc * 0.4);
						if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) inc = floor(inc * 0.5);
						if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) inc = floor(inc * 0.6);
						if (buttons & BT_JUMP) inc = floor(inc * 0.4);
						if (buttons & BT_CROUCH) inc = floor(inc * 1.8);

						if (Owner.CountInv("PowerWineBuffWeak")) inc = floor(inc * 1.5);
						if (Owner.CountInv("PowerWineBuffStrong")) inc = floor(inc * 2.25);
						if (Owner.CountInv("PowerWineBuffStrongest")) inc = floor(inc * 3.25);
						if (Owner.CountInv("PowerWineBuffStrongestEven")) inc = floor(inc * 4.5);

						if (CurrentHealth <= (MaxHealthTrue * 0.02)) inc = floor(inc * 20);
						else if (CurrentHealth <= (MaxHealthTrue * 0.10)) inc = floor(inc * 5);
						else if (CurrentHealth <= (MaxHealthTrue * 0.25)) inc = floor(inc * 1.25);
						else if (CurrentHealth <= (MaxHealthTrue * 0.50)) inc = floor(inc * 1.0625);
						
						HPRegenTimer += inc;
						
						if (HPRegenTimer > HPRegenTimerMax)
						{
							HPRegenTimer -= HPRegenTimerMax;
							if (HPRegenTimer < 0) HPRegenTimer = 0;
							
							if (CurrentHealth < MaxHealthTrue)
							{
								if (owner.CountInv("PowerStrength")) CurrentHealth += randompick(1,1,1,1,1,1,1,1,1,2);
								else CurrentHealth += randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
								if (CurrentHealth >= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
								owner.player.health = owner.player.mo.health = CurrentHealth;
							}
						}
						if (debughpregen) Console.Printf("RegenTimer: %d / %d  (inc: %d)", HPRegenTimer, HPRegenTimerMax, inc);
					}
					else
					{
						HPRegenTimer = 0;
					}
				}
				else
				if (CurrentHealth > MaxHealthTrue)
				{
					if (hpwilldegen)
					{
						int inc = 20 - (PlayerLevel * 0.05);
						
						if (owner.CountInv("PowerStrength")) inc = floor(inc * 0.25);
						
						if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) inc = floor(inc * 2.5);
						if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) inc = floor(inc * 2.0);
						if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) inc = floor(inc * 1.666666666666667);
						if (buttons & BT_JUMP) inc = floor(inc * 2.5);
						if (buttons & BT_CROUCH) inc = floor(inc * 0.5555555555555556);

						if (Owner.CountInv("PowerWineBuffWeak")) inc = floor(inc * 0.6666666666666667);
						if (Owner.CountInv("PowerWineBuffStrong")) inc = floor(inc * 0.4444444444444444);
						if (Owner.CountInv("PowerWineBuffStrongest")) inc = floor(inc * 0.3076923076923077);
						if (Owner.CountInv("PowerWineBuffStrongestEven")) inc = floor(inc * 0.2222222222222222);
						
						if (CurrentHealth >= (MaxHealthTrue * 3.0)) inc = floor(inc * 3.0);
						else if (CurrentHealth >= (MaxHealthTrue * 2.75)) inc = floor(inc * 2.75);
						else if (CurrentHealth >= (MaxHealthTrue * 2.50)) inc = floor(inc * 2.5);
						else if (CurrentHealth >= (MaxHealthTrue * 2.25)) inc = floor(inc * 2.25);
						else if (CurrentHealth >= (MaxHealthTrue * 2.00)) inc = floor(inc * 2.0);
						else if (CurrentHealth >= (MaxHealthTrue * 1.75)) inc = floor(inc * 1.75);
						else if (CurrentHealth >= (MaxHealthTrue * 1.50)) inc = floor(inc * 1.5);
						else if (CurrentHealth >= (MaxHealthTrue * 1.25)) inc = floor(inc * 1.25);
						else if (CurrentHealth >= (MaxHealthTrue * 1.00)) inc = floor(inc * 1.0);
						
						HPDegenTimer += inc;
						
						if (HPDegenTimer > HPDegenTimerMax)
						{
							HPDegenTimer -= HPDegenTimerMax;
							if (HPDegenTimer < 0) HPDegenTimer = 0;
							
							if (CurrentHealth > MaxHealthTrue)
							{
								if (owner.CountInv("PowerStrength")) CurrentHealth -= randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
								else CurrentHealth -= randompick(1,1,1,1,1,1,1,1,1,2);
								if (CurrentHealth <= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
								owner.player.health = owner.player.mo.health = CurrentHealth;
							}
						}
						if (debughpregen) Console.Printf("DegenTimer: %d / %d  (inc: %d)", HPDegenTimer, HPDegenTimerMax, inc);
					}
					else
					{
						HPDegenTimer = 0;
					}
				}
				else
				{
					HPRegenTimer = 0;
					HPDegenTimer = 0;
					if (debughpregen) Console.Printf("Regen/Degen Neutral");
				}
			}
			
			//
			// Survival Rate [Buddha]
			//
			SurvivalRate = 100; // out of 10000 [1%]
			SurvivalRate += (PlayerLevel * 5); // +0.05% per level
			
			if (owner.CountInv("KnightGownItem")) SurvivalRate += random(312,313);
			if (owner.CountInv("KnightGownItem2")) SurvivalRate += 625;
			if (owner.CountInv("KnightGownItem3")) SurvivalRate += 1250;
			if (owner.CountInv("KnightGownItem4")) SurvivalRate += 2500;

			if (Owner.CountInv("PowerWineBuffWeak")) SurvivalRate += random(312,313);
			if (Owner.CountInv("PowerWineBuffStrong")) SurvivalRate += 625;
			if (Owner.CountInv("PowerWineBuffStrongest")) SurvivalRate += random(937,938);
			if (Owner.CountInv("PowerWineBuffStrongestEven")) SurvivalRate += 1250;
			
			if (SurvivalRate > 7500) SurvivalRate = 7500;
			int SurviveRNGVal = random[statitem](1,10000); // Based on 0.01% to 100.00%
			if (SurviveRNGVal <= SurvivalRate) owner.player.cheats |= CF_BUDDHA; else owner.player.cheats &= ~CF_BUDDHA;

			bool debugsurvival = false;
			if (debugsurvival)
			{
				if (SurviveRNGVal <= SurvivalRate) Console.Printf("    \cdSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
																			else Console.Printf("    \cgSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
			}
			
			//
			// JumpZ
			//
			bool debugjumpz = false;
			double CharacterJumpZ = 8.25;
			
			// Buffs
			double BuffJumpZ = 1.00;
			if (owner.CountInv("PowerStrength")) BuffJumpZ *= 1.34;
			if (owner.CountInv("PowerWineBuffWeak")) BuffJumpZ *= frandom(0.98,1.00);
			if (owner.CountInv("PowerWineBuffStrong")) BuffJumpZ *= frandom(0.96,1.00);
			if (owner.CountInv("PowerWineBuffStrongest")) BuffJumpZ *= frandom(0.93,1.00);
			if (owner.CountInv("PowerWineBuffStrongestEven")) BuffJumpZ *= frandom(0.88,1.00);

			// Level
			double LevelJumpZ = 1.00;
			LevelJumpZ += (PlayerLevel * 0.0025);

			// Armor
			double ArmorJumpZ = 1.00;
			if (Owner.CountInv("KnightGownItem"))					ArmorJumpZ -= 0.0125;
			if (Owner.CountInv("KnightGownItem2"))				ArmorJumpZ -= 0.025;
			if (Owner.CountInv("KnightGownItem3"))				ArmorJumpZ -= 0.0475;
			if (Owner.CountInv("KnightGownItem4"))				ArmorJumpZ -= 0.0875;

			double TotalJumpZ = CharacterJumpZ
												* LevelJumpZ
												* BuffJumpZ
												* ArmorJumpZ;

			if (debugjumpz) Console.Printf("%.8f (%.8f, %.8f, %.8f, %.8f)", TotalJumpZ, CharacterJumpZ, LevelJumpZ, BuffJumpZ, ArmorJumpZ);
			PlayerPawn(Owner).JumpZ = TotalJumpZ;
			
			
			// SuperVac Ammo
			bool debugsupervacbag = false;
			int vacammoprev = owner.CountInv("VacAmmo");
			int vacgiveammo;
			int vacammocounter = owner.CountInv("VacAmmoCounter");
			if (debugsupervacbag) Console.Printf("Vacuum Bag Size: %d / %d", vacammocounter, SuperVacBagSize);
			while (vacammocounter >= SuperVacBagSize)
			{
				vacammocounter -= SuperVacBagSize;
				owner.A_SetInventory("VacAmmoCounter",vacammocounter);
				vacgiveammo += 1;
				owner.A_StartSound("VacDed",random(11,20),CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NORM,frandom(0.8,1.2));
				owner.A_StartSound("VacDed",random(21,30),CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NORM,frandom(0.8,1.2));
			}
			if (vacgiveammo)
			{
				owner.A_GiveInventory("VacAmmo",vacgiveammo);
				Console.Printf("Filled %d bag[s] in the SuperVac!", vacgiveammo);
				vacgiveammo = 0;
			}
			int vacammonow = owner.CountInv("VacAmmo");
			if (vacammoprev < 8 && vacammonow >= 8)
			{
				owner.A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT);
				owner.A_Log("The SuperVac's Alt-Fire is Ready!", vacgiveammo);
			}
			if (vacammoprev < 16 && vacammonow >= 16)
			{
				owner.A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT);
				owner.A_Log("The SuperVac's Alt-Fire Has TWO Charges now!", vacgiveammo);
			}
			if (vacammoprev < 24 && vacammonow >= 24)
			{
				owner.A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT);
				owner.A_Log("The SuperVac's Alt-Fire Has THREE Charges now!", vacgiveammo);
			}
			
			// TimeFreeze Handler
			bool debugtimefreeze = false;
			int BeatTimer;
			int TickTimer;
			double BeatVol;
			TimeFreezeTimer = owner.CountInv("TimeFreezeTimer");
			TimeFreeze = owner.CountInv("TimePotionTimeFreezer");
			if (TimeFreeze)
			{
				if (TimeFreezeTimer)
				{
					// Start Up
					if (PrevTimeFreezeTimer == 0)
					{
						owner.A_StopSound(CHAN_6);
						owner.A_StartSound("TimeFreezeIn4",CHAN_6,CHANF_DEFAULT,0.875,ATTN_NONE); 
						//owner.A_StartSound("TheWorldIn",CHAN_6,CHANF_DEFAULT,0.875,ATTN_NONE); 
					}
					owner.A_SetInventory("TimePotionTimeFreezer",1);
					
					// Ticks
					TickTimer = TimeFreezeTimer % 35;
					if (TickTimer == 0 && PrevTimeFreezeTimer != 0)
					{
						owner.A_StopSound(CHAN_6); 
						owner.A_StartSound("TimeStopTick",CHAN_6,CHANF_DEFAULT,frandom[statitem2](0.80,1.20),ATTN_NONE); 
					}
					
					// Heart Beat Effecty
					if (TimeFreezeTimer > 66 && PrevTimeFreezeTimer != 0)
					{
						BeatVol = 0.5;
						int BeatInt1 = 42;
						int BeatInt2 = 34;
						int BeatInt3 = 26;
						int BeatInt4 = random(13,15);
						double BeatVol1 = 0.25;
						double BeatVol2 = 0.3125;
						double BeatVol3 = 0.3875;
						double BeatVol4 = 0.5;
						if (owner.CountInv("PowerStrength"))
						{
							if (Owner.CountInv("NormalHealth"))					{ BeatTimer = TimeFreezeTimer % (BeatInt1 * 0.75); BeatVol = (BeatVol1 * 1.33); }
							else if (Owner.CountInv("DecentHealth"))		{ BeatTimer = TimeFreezeTimer % (BeatInt2 * 0.75); BeatVol = (BeatVol2 * 1.33); }
							else if (Owner.CountInv("LowHealth"))				{ BeatTimer = TimeFreezeTimer % (BeatInt3 * 0.75); BeatVol = (BeatVol3 * 1.33); }
							else if (Owner.CountInv("CriticalHealth"))	{ BeatTimer = TimeFreezeTimer % (BeatInt4 * 0.75); BeatVol = (BeatVol4 * 1.33); }
						}
						else
						{
							if (Owner.CountInv("NormalHealth"))					{ BeatTimer = TimeFreezeTimer % BeatInt1; BeatVol = BeatVol1; }
							else if (Owner.CountInv("DecentHealth"))		{ BeatTimer = TimeFreezeTimer % BeatInt2; BeatVol = BeatVol2; }
							else if (Owner.CountInv("LowHealth"))				{ BeatTimer = TimeFreezeTimer % BeatInt3; BeatVol = BeatVol3; }
							else if (Owner.CountInv("CriticalHealth"))	{ BeatTimer = TimeFreezeTimer % BeatInt4; BeatVol = BeatVol4; }
						}
					}
					if (debugtimefreeze) Console.Printf("BeatTimer: %d", BeatTimer);
					if (BeatTimer == 0)
					{
						owner.A_StopSound(33);
						owner.A_StartSound("TimeFreezeLoop4",CHANF_DEFAULT,33,BeatVol,ATTN_NONE); 
					}
					
					// Wind Down
					if (TimeFreezeTimer >= 64 && TimeFreezeTimer <= 66) 
					{
						owner.A_StopSound(CHAN_7); 
						owner.A_StartSound("TimeFreezeOut4",CHAN_7,CHANF_DEFAULT,0.875,ATTN_NONE); 
					}

					TimeFreezeTimer -= 1;
					if (TimeFreezeTimer < 1)
					{
						TimeFreezeTimer = 0;
						TimeFreeze = 0;
					}
				}
				if (debugtimefreeze) Console.Printf("%d Tics of Time Freeze Left", TimeFreezeTimer);
				PrevTimeFreezeTimer = TimeFreezeTimer;
			}
			owner.A_SetInventory("TimeFreezeTimer",TimeFreezeTimer);
			owner.A_SetInventory("TimePotionTimeFreezer",TimeFreeze);
			
			
			
			
			//
			owner.player.health = owner.player.mo.health = CurrentHealth;
			owner.A_SetInventory("PlayerMaxHP",MaxHealthTrue);
			
			ClassCheck++;
			super.DoEffect();
		}
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		let weapon = owner.player.ReadyWeapon;
		TrueGameSkill = skill;
		bool debugdmg = false;
		
		// ******************
		// ******************
		// **Offensive Code**
		// ******************
		// ******************
		if (!passive && damage > 0) // If the owner [usually the player] of the item is the ATTACKER
		{
			if (debugdmg) Console.Printf("Damage (!passive): %d", damage);
			double LVLFactor = (1.00 + (PlayerLevel * 0.0125));
			if (debugdmg) Console.Printf("Damage (!passive - Level): %d", damage);

			double SkillFactor = 1.00;
			if (Skill == SKILL_VERY_HARD) SkillFactor *= 0.75;
			if (Skill == SKILL_HARD) SkillFactor *= 0.875;
			if (Skill == SKILL_NORMAL) SkillFactor *= 1.00;
			if (Skill == SKILL_EASY) SkillFactor *= 1.125;
			if (Skill == SKILL_VERY_EASY) SkillFactor *= 1.25;
			if (debugdmg) Console.Printf("Damage (!passive - Skill): %d", damage);

			double BuffFactor = 1.00;
			if (Owner.CountInv("PowerInvisibility")) BuffFactor *= frandompick(1.00,1.00,1.125,1.125,1.25);

			if (Owner.CountInv("PowerWineBuffWeak")) BuffFactor *= frandompick(0.985,1.015);
			if (Owner.CountInv("PowerWineBuffStrong")) BuffFactor *= frandompick(0.955,1.045);
			if (Owner.CountInv("PowerWineBuffStrongest")) BuffFactor *= frandompick(0.91,1.09);
			if (Owner.CountInv("PowerWineBuffStrongestEven")) BuffFactor *= frandompick(0.85,1.15);
			if (debugdmg) Console.Printf("Damage (!passive - Buff): %d", damage);
			
			double TOTALFactor = 1.0
													 * LVLFactor
													 * SkillFactor
													 * BuffFactor;

			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			if (debugdmg) Console.Printf("FDamage (!passive): %d", newdamage);
		}
		
		// ******************
		// ******************
		// **Defensive Code**
		// ******************
		// ******************
		if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
		{
			if (debugdmg) Console.Printf("FDamage (passive[pre]): %d", damage);
			double LVLFactor = (1.00 - (PlayerLevel * 0.0125));
			if (debugdmg) Console.Printf("Damage (passive - Level): %d", damage);

			double SkillFactor = 1.00;
			if (Skill == SKILL_VERY_EASY) SkillFactor *= 0.75;
			if (Skill == SKILL_EASY) SkillFactor *= 0.875;
			if (Skill == SKILL_NORMAL) SkillFactor *= 1.00;
			if (Skill == SKILL_HARD) SkillFactor *= 1.125;
			if (Skill == SKILL_VERY_HARD) SkillFactor *= 1.25;
			if (debugdmg) Console.Printf("Damage (passive - Skill): %d", damage);
			
			double BuffFactor = 1.00;
			if (Owner.CountInv("PowerStrength")) BuffFactor *= frandompick(0.8,0.9,0.9,0.9,1.0);
			if (Owner.CountInv("PowerInvisibility")) BuffFactor *= frandompick(1.00,1.00,0.875,0.875,0.75);

			if (Owner.CountInv("PowerWineBuffWeak")) BuffFactor *= frandompick(0.995,1.005);
			if (Owner.CountInv("PowerWineBuffStrong")) BuffFactor *= frandompick(0.985,1.015);
			if (Owner.CountInv("PowerWineBuffStrongest")) BuffFactor *= frandompick(0.97,1.03);
			if (Owner.CountInv("PowerWineBuffStrongestEven")) BuffFactor *= frandompick(0.95,1.05);
			if (debugdmg) Console.Printf("Damage (passive - Buff): %d", damage);

			double TOTALFactor = 1.0
													 * LVLFactor
													 * SkillFactor
													 * BuffFactor;

			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			if (debugdmg) Console.Printf("FDamage (passive - Final): %d", newdamage);
		}
	}
	
	override double GetSpeedFactor()
	{
		let weapon = owner.player.ReadyWeapon;
		CurrentHealth = owner.health;
		MaxHealthTrue = (owner.spawnhealth() + owner.player.mo.stamina);

		Speed = 1.00;
		Speed *= (1.00 + (PlayerLevel * 0.0125));

		if (CurrentHealth >= (MaxHealthTrue * 3)) Speed *= 1.25;
		else if (CurrentHealth >= (MaxHealthTrue * 2.75)) Speed *= 1.21875;
		else if (CurrentHealth >= (MaxHealthTrue * 2.5)) Speed *= 1.1875;
		else if (CurrentHealth >= (MaxHealthTrue * 2.25)) Speed *= 1.15625;
		else if (CurrentHealth >= (MaxHealthTrue * 2.0)) Speed *= 1.125;
		else if (CurrentHealth >= (MaxHealthTrue * 1.75)) Speed *= 1.09375;
		else if (CurrentHealth >= (MaxHealthTrue * 1.5)) Speed *= 1.0625;
		else if (CurrentHealth >= (MaxHealthTrue * 1.25)) Speed *= 1.03125;
		else if (CurrentHealth >= (MaxHealthTrue * 0.75)) Speed *= 1.00;
		else if (CurrentHealth >= (MaxHealthTrue * 0.5)) Speed *= 0.9375;
		else if (CurrentHealth >= (MaxHealthTrue * 0.25)) Speed *= 0.875;
		else Speed *= 0.8125;

		if (Owner.CountInv("PowerStrength")) Speed *= 1.125;
		
		if (Owner.CountInv("PowerWineBuffWeak")) Speed *= frandom(0.965,0.975);
		if (Owner.CountInv("PowerWineBuffStrong")) Speed *= frandom(0.89,0.91);
		if (Owner.CountInv("PowerWineBuffStrongest")) Speed *= frandom(0.80,0.84);
		if (Owner.CountInv("PowerWineBuffStrongestEven")) Speed *= frandom(0.69,0.75);

		if (owner.CountInv("KnightGownItem")) Speed *= 0.99;
		if (owner.CountInv("KnightGownItem2")) Speed *= 0.97;
		if (owner.CountInv("KnightGownItem3")) Speed *= 0.94;
		if (owner.CountInv("KnightGownItem4")) Speed *= 0.90;

		//Console.Printf("SpeedX: %.8f", Speed);
		return Speed; 
	}
}