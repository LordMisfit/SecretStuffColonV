class DinahBackgroundStuff : Inventory
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;



	int PrevTimeFreezeTimer;
	int TimeFreeze;
	int TimeFreezeTimer;

	int HPRegenBonPenTimer;
	int HPRegenTimer;
	int HPDegenTimer;
	int HPRegenTimerMax;
	int HPDegenTimerMax;
	
	int PrevHealthRatio;
	int HealthRatio;
	int CurrentHealth;
	int MaxHealthTrue;
	int MaxHealthLimit;

	int TrueGameSkill;
	int CurrentArmorClass;
	int CurrentMaxArmor;
	int ArmorResistance;
	int ClassicDoomType;
	int ModType;
	int TotalMass;

	int PlayerLevel;
	int PlayerJUMP;
	
	int SurvivalRate;
	
	int SuperVacBagSize;
	
	int ClassCheck;
	
	int buttons;
	int FreezePlayer;
	int Player1TID;
	
	int StrifeStamLvl;
	int StrifeAccuLvl;

	default 
	{
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	override void DoEffect()
	{
		let playeractor = PlayerPawn(owner);
		if (!playeractor) // Removes itself if given to a Player Class
		{
			owner.A_SetInventory("DinahBackgroundStuff",0); super.DoEffect(); 
		} 
		else
		if (playeractor) // Otherwise, Keep
		{
			buttons = owner.GetPlayerInput(INPUT_BUTTONS);
			TrueGameSkill = skill;
			if (ClassCheck == 0 || SuperVacBagSize <= 0) 
			{ 
				if (TrueGameSkill == SKILL_VERY_EASY) SuperVacBagSize = 240;
				if (TrueGameSkill == SKILL_EASY) SuperVacBagSize = 320;
				if (TrueGameSkill == SKILL_NORMAL) SuperVacBagSize = 400;
				if (TrueGameSkill == SKILL_HARD) SuperVacBagSize = 480;
				if (TrueGameSkill == SKILL_VERY_HARD) SuperVacBagSize = 560;
			}

			HPRegenTimerMax = 7000 - (owner.player.mo.stamina * 35);
			HPDegenTimerMax = 1750 + (owner.player.mo.stamina * 17.5);
			CurrentHealth = owner.player.mo.health;
			MaxHealthTrue = (owner.spawnhealth() + owner.player.mo.stamina);
			
			// HP Regen/Degen
			bool hpregendebug = false;
			bool hpwillregen = true;
			bool hpwilldegen = true;
			if (CurrentHealth > 0)
			{
				if (hpregendebug) Console.Printf("Health: %d / %d", CurrentHealth, MaxHealthTrue);
				
				//****************************************
				//*Get Health Ratio & Health Level Checks*
				//****************************************
				if (playeractor && MaxHealthTrue > 0)
				{
					HealthRatio = (CurrentHealth * 1000) / MaxHealthTrue;
					HealthRatio = clamp(HealthRatio, 0, 2000);
		
					if (CurrentHealth <= 0) { Owner.A_SetInventory("PlayerIsDead", 1); }
					else
					{
						Owner.A_SetInventory("PlayerIsDead", 0);
						if (HealthRatio != PrevHealthRatio)
						{
							if (HealthRatio < 625)
							{
								if (HealthRatio < 167)
								{
									if (HealthRatio < 21)
									{
										Owner.A_SetInventory("CriticalHealth", 1);
										Owner.A_SetInventory("LowHealth", 0);
										Owner.A_SetInventory("DecentHealth", 0);
										Owner.A_SetInventory("NormalHealth", 0);
									}
									else 
									{
										Owner.A_SetInventory("CriticalHealth", 0);
										Owner.A_SetInventory("LowHealth", 1);
										Owner.A_SetInventory("DecentHealth", 0);
										Owner.A_SetInventory("NormalHealth", 0);
									}
								}
								else 
								{
									Owner.A_SetInventory("CriticalHealth", 0);
									Owner.A_SetInventory("LowHealth", 0);
									Owner.A_SetInventory("DecentHealth", 1);
									Owner.A_SetInventory("NormalHealth", 0);
								}
							}
							else
							{
								Owner.A_SetInventory("CriticalHealth", 0);
								Owner.A_SetInventory("LowHealth", 0);
								Owner.A_SetInventory("DecentHealth", 0);
								Owner.A_SetInventory("NormalHealth", 1);
							}
							if (CurrentHealth >= MaxHealthTrue) Owner.A_SetInventory("FullHealth", 1); else Owner.A_SetInventory("FullHealth", 0);
							
							PrevHealthRatio = HealthRatio;
						}
					}
				}

				if (CurrentHealth < MaxHealthTrue)
				{
					if (hpwillregen)
					{
						int inc = 20;

						if (owner.CountInv("PowerStrength")) inc = floor(inc * 4);

						if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) inc = floor(inc * 0.4);
						if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) inc = floor(inc * 0.5);
						if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) inc = floor(inc * 0.6);
						if (buttons & BT_JUMP) inc = floor(inc * 0.4);
						if (buttons & BT_CROUCH) inc = floor(inc * 1.8);

						if (Owner.CountInv("PowerWineBuffWeak")) inc = floor(inc * 1.5);
						if (Owner.CountInv("PowerWineBuffStrong")) inc = floor(inc * 2.25);
						if (Owner.CountInv("PowerWineBuffStrongest")) inc = floor(inc * 3.25);
						if (Owner.CountInv("PowerWineBuffStrongestEven")) inc = floor(inc * 4.5);

						if (CurrentHealth <= (MaxHealthTrue * 0.02)) inc = floor(inc * 20);
						else if (CurrentHealth <= (MaxHealthTrue * 0.10)) inc = floor(inc * 5);
						else if (CurrentHealth <= (MaxHealthTrue * 0.25)) inc = floor(inc * 1.25);
						else if (CurrentHealth <= (MaxHealthTrue * 0.50)) inc = floor(inc * 1.0625);
						
						HPRegenTimer += inc;
						
						if (HPRegenTimer > HPRegenTimerMax)
						{
							HPRegenTimer -= HPRegenTimerMax;
							if (HPRegenTimer < 0) HPRegenTimer = 0;
							
							if (CurrentHealth < MaxHealthTrue)
							{
								if (owner.CountInv("PowerStrength")) CurrentHealth += randompick(1,1,1,1,1,1,1,1,1,2);
								else CurrentHealth += randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
								if (CurrentHealth >= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
								owner.player.health = owner.player.mo.health = CurrentHealth;
							}
						}
						if (hpregendebug) Console.Printf("RegenTimer: %d / %d  (inc: %d)", HPRegenTimer, HPRegenTimerMax, inc);
					}
					else
					{
						HPRegenTimer = 0;
					}
				}
				else
				if (CurrentHealth > MaxHealthTrue)
				{
					if (hpwilldegen)
					{
						int inc = 20;
						
						if (owner.CountInv("PowerStrength")) inc = floor(inc * 0.25);
						
						if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) inc = floor(inc * 2.5);
						if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) inc = floor(inc * 2.0);
						if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) inc = floor(inc * 1.666666666666667);
						if (buttons & BT_JUMP) inc = floor(inc * 2.5);
						if (buttons & BT_CROUCH) inc = floor(inc * 0.5555555555555556);

						if (Owner.CountInv("PowerWineBuffWeak")) inc = floor(inc * 0.6666666666666667);
						if (Owner.CountInv("PowerWineBuffStrong")) inc = floor(inc * 0.4444444444444444);
						if (Owner.CountInv("PowerWineBuffStrongest")) inc = floor(inc * 0.3076923076923077);
						if (Owner.CountInv("PowerWineBuffStrongestEven")) inc = floor(inc * 0.2222222222222222);
						
						if (CurrentHealth >= (MaxHealthTrue * 3.0)) inc = floor(inc * 3.0);
						else if (CurrentHealth >= (MaxHealthTrue * 2.75)) inc = floor(inc * 2.75);
						else if (CurrentHealth >= (MaxHealthTrue * 2.50)) inc = floor(inc * 2.5);
						else if (CurrentHealth >= (MaxHealthTrue * 2.25)) inc = floor(inc * 2.25);
						else if (CurrentHealth >= (MaxHealthTrue * 2.00)) inc = floor(inc * 2.0);
						else if (CurrentHealth >= (MaxHealthTrue * 1.75)) inc = floor(inc * 1.75);
						else if (CurrentHealth >= (MaxHealthTrue * 1.50)) inc = floor(inc * 1.5);
						else if (CurrentHealth >= (MaxHealthTrue * 1.25)) inc = floor(inc * 1.25);
						else if (CurrentHealth >= (MaxHealthTrue * 1.00)) inc = floor(inc * 1.0);
						
						HPDegenTimer += inc;
						
						if (HPDegenTimer > HPDegenTimerMax)
						{
							HPDegenTimer -= HPDegenTimerMax;
							if (HPDegenTimer < 0) HPDegenTimer = 0;
							
							if (CurrentHealth > MaxHealthTrue)
							{
								if (owner.CountInv("PowerStrength")) CurrentHealth -= randompick(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2);
								else CurrentHealth -= randompick(1,1,1,1,1,1,1,1,1,2);
								if (CurrentHealth <= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
								owner.player.health = owner.player.mo.health = CurrentHealth;
							}
						}
						if (hpregendebug) Console.Printf("DegenTimer: %d / %d  (inc: %d)", HPDegenTimer, HPDegenTimerMax, inc);
					}
					else
					{
						HPDegenTimer = 0;
					}
				}
				else
				{
					HPRegenTimer = 0;
					HPDegenTimer = 0;
					if (hpregendebug) Console.Printf("Regen/Degen Neutral");
				}
			}
			
			// Survival Rate [Buddha]
			SurvivalRate = 100; // out of 10000 [1%]
			SurvivalRate += (PlayerLevel * 5); // +0.05% per level
			
			if (owner.CountInv("KnightGownItem")) SurvivalRate += random(312,313);
			if (owner.CountInv("KnightGownItem2")) SurvivalRate += 625;
			if (owner.CountInv("KnightGownItem3")) SurvivalRate += 1250;
			if (owner.CountInv("KnightGownItem4")) SurvivalRate += 2500;

			if (Owner.CountInv("PowerWineBuffWeak")) SurvivalRate += random(312,313);
			if (Owner.CountInv("PowerWineBuffStrong")) SurvivalRate += 625;
			if (Owner.CountInv("PowerWineBuffStrongest")) SurvivalRate += random(937,938);
			if (Owner.CountInv("PowerWineBuffStrongestEven")) SurvivalRate += 1250;
			
			if (SurvivalRate > 7500) SurvivalRate = 7500;
			int SurviveRNGVal = random[statitem](1,10000); // Based on 0.01% to 100.00%
			if (SurviveRNGVal <= SurvivalRate) owner.player.cheats |= CF_BUDDHA; else owner.player.cheats &= ~CF_BUDDHA;

			bool debugsurvival = false;
			if (debugsurvival)
			{
				if (SurviveRNGVal <= SurvivalRate) Console.Printf("    \cdSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
																			else Console.Printf("    \cgSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
			}
			
			// JumpZ
			if (owner.CountInv("PowerStrength")) PlayerPawn(Owner).JumpZ = 12;
			else PlayerPawn(Owner).JumpZ = 9;
			
			// SuperVac Ammo
			bool supervacdebug = false;
			int vacammoprev = owner.CountInv("VacAmmo");
			int vacgiveammo;
			int vacammocounter = owner.CountInv("VacAmmoCounter");
			if (supervacdebug) Console.Printf("Vaccum Bag Size: %d / %d", vacammocounter, SuperVacBagSize);
			while (vacammocounter >= SuperVacBagSize)
			{
				vacammocounter -= SuperVacBagSize;
				owner.A_SetInventory("VacAmmoCounter",vacammocounter);
				vacgiveammo += 1;
				owner.A_StartSound("VacDed",random(11,20),CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NORM,frandom(0.8,1.2));
				owner.A_StartSound("VacDed",random(21,30),CHANF_DEFAULT,frandom(0.8,1.2),ATTN_NORM,frandom(0.8,1.2));
			}
			if (vacgiveammo)
			{
				owner.A_GiveInventory("VacAmmo",vacgiveammo);
				Console.Printf("Filled %d bag[s] in the SuperVac!", vacgiveammo);
				vacgiveammo = 0;
			}
			int vacammonow = owner.CountInv("VacAmmo");
			if (vacammoprev < 12 && vacammonow >= 12)
			{
				owner.A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT);
				owner.A_Log("The SuperVac's Alt-Fire is Ready!", vacgiveammo);
			}
			if (vacammoprev < 24 && vacammonow >= 24)
			{
				owner.A_StartSound("Dinah/Gotcha",CHAN_VOICE,CHANF_DEFAULT);
				owner.A_Log("The SuperVac's Alt-Fire Has TWO Charges now!", vacgiveammo);
			}
			
			// TimeFreeze Handler
			bool debugtimefreeze = false;
			int BeatTimer;
			int TickTimer;
			double BeatVol;
			TimeFreezeTimer = owner.CountInv("TimeFreezeTimer");
			TimeFreeze = owner.CountInv("TimePotionTimeFreezer");
			if (TimeFreeze)
			{
				if (TimeFreezeTimer)
				{
					// Start Up
					if (PrevTimeFreezeTimer == 0)
					{
						owner.A_StopSound(CHAN_6);
						owner.A_StartSound("TimeFreezeIn4",CHAN_6,CHANF_DEFAULT,0.875,ATTN_NONE); 
						//owner.A_StartSound("TheWorldIn",CHAN_6,CHANF_DEFAULT,0.875,ATTN_NONE); 
					}
					owner.A_SetInventory("TimePotionTimeFreezer",1);
					
					// Ticks
					TickTimer = TimeFreezeTimer % 35;
					if (TickTimer == 0)
					{
						owner.A_StopSound(CHAN_6); 
						owner.A_StartSound("TimeStopTick",CHAN_6,CHANF_DEFAULT,frandom[statitem2](0.80,1.20),ATTN_NONE); 
					}
					
					// Heart Beat Effecty
					if (TimeFreezeTimer > 66 && PrevTimeFreezeTimer != 0)
					{
						BeatVol = 0.5;
						if (Owner.CountInv("NormalHealth")) { BeatTimer = TimeFreezeTimer % 40; BeatVol = 0.25; }
						else if (Owner.CountInv("DecentHealth")) { BeatTimer = TimeFreezeTimer % 33; BeatVol = 0.3125; }
						else if (Owner.CountInv("LowHealth")) { BeatTimer = TimeFreezeTimer % 27; BeatVol = 0.3875; }
						else if (Owner.CountInv("CriticalHealth")) { BeatTimer = TimeFreezeTimer % 20; BeatVol = 0.5; }
					}
					if (debugtimefreeze) Console.Printf("BeatTimer: %d", BeatTimer);
					if (BeatTimer == 0)
					{
						owner.A_StopSound(33);
						owner.A_StartSound("TimeFreezeLoop4",CHANF_DEFAULT,33,BeatVol,ATTN_NONE); 
					}
					
					// Wind Down
					if (TimeFreezeTimer >= 64 && TimeFreezeTimer <= 66) 
					{
						owner.A_StopSound(CHAN_7); 
						owner.A_StartSound("TimeFreezeOut4",CHAN_7,CHANF_DEFAULT,0.875,ATTN_NONE); 
					}

					TimeFreezeTimer -= 1;
					if (TimeFreezeTimer < 1)
					{
						TimeFreezeTimer = 0;
						TimeFreeze = 0;
					}
				}
				if (debugtimefreeze) Console.Printf("%d Tics of Time Freeze Left", TimeFreezeTimer);
				PrevTimeFreezeTimer = TimeFreezeTimer;
			}
			owner.A_SetInventory("TimeFreezeTimer",TimeFreezeTimer);
			owner.A_SetInventory("TimePotionTimeFreezer",TimeFreeze);
			
			
			
			
			//
			owner.player.health = owner.player.mo.health = CurrentHealth;
			
			ClassCheck++;
			super.DoEffect();
		}
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		let weapon = owner.player.ReadyWeapon;
		TrueGameSkill = skill;
		
		// ******************
		// ******************
		// **Offensive Code**
		// ******************
		// ******************
		if (!passive && damage > 0) // If the owner [usually the player] of the item is the ATTACKER
		{
			//Console.Printf("Damage (!passive): %d", newdamage);
			newdamage *= (1.00 + (PlayerLevel * 0.0125));

			if (Skill == SKILL_VERY_HARD) newdamage *= 0.75;
			if (Skill == SKILL_HARD) newdamage *= 0.875;
			if (Skill == SKILL_NORMAL) newdamage *= 1.00;
			if (Skill == SKILL_EASY) newdamage *= 1.125;
			if (Skill == SKILL_VERY_EASY) newdamage *= 1.25;

			if (Owner.CountInv("PowerInvisibility")) newdamage *= frandompick(1.00,1.00,1.125,1.125,1.25);

			if (Owner.CountInv("PowerWineBuffWeak")) newdamage = floor(newdamage * frandompick(0.985,1.015));
			if (Owner.CountInv("PowerWineBuffStrong")) newdamage = floor(newdamage * frandompick(0.955,1.045));
			if (Owner.CountInv("PowerWineBuffStrongest")) newdamage = floor(newdamage * frandompick(0.91,1.09));
			if (Owner.CountInv("PowerWineBuffStrongestEven")) newdamage = floor(newdamage * frandompick(0.85,1.15));

			//Console.Printf("FDamage (!passive): %d", newdamage);
		}
		
		// ******************
		// ******************
		// **Defensive Code**
		// ******************
		// ******************
		if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
		{
			//Console.Printf("Damage (passive): %d", newdamage);
			newdamage *= (1.00 - (PlayerLevel * 0.0125));

			if (Skill == SKILL_VERY_EASY) newdamage *= 0.75;
			if (Skill == SKILL_EASY) newdamage *= 0.875;
			if (Skill == SKILL_NORMAL) newdamage *= 1.00;
			if (Skill == SKILL_HARD) newdamage *= 1.125;
			if (Skill == SKILL_VERY_HARD) newdamage *= 1.25;
			
			if (Owner.CountInv("PowerStrength")) newdamage *= frandompick(0.8,0.9,0.9,0.9,1.0);
			if (Owner.CountInv("PowerInvisibility")) newdamage *= frandompick(1.00,1.00,0.875,0.875,0.75);
			
			if (Owner.CountInv("PowerWineBuffWeak")) newdamage = floor(newdamage * frandompick(0.995,1.005));
			if (Owner.CountInv("PowerWineBuffStrong")) newdamage = floor(newdamage * frandompick(0.985,1.015));
			if (Owner.CountInv("PowerWineBuffStrongest")) newdamage = floor(newdamage * frandompick(0.97,1.03));
			if (Owner.CountInv("PowerWineBuffStrongestEven")) newdamage = floor(newdamage * frandompick(0.95,1.05));

			//Console.Printf("FDamage (passive): %d", newdamage);
		}
	}
	
	override double GetSpeedFactor() 
	{
		let weapon = owner.player.ReadyWeapon;
		CurrentHealth = owner.health;
		MaxHealthTrue = (owner.spawnhealth() + owner.player.mo.stamina);

		Speed = 1.00;
		Speed *= (1.00 + (PlayerLevel * 0.0125));

		if (CurrentHealth >= (MaxHealthTrue * 3)) Speed *= 1.25;
		else if (CurrentHealth >= (MaxHealthTrue * 2.75)) Speed *= 1.21875;
		else if (CurrentHealth >= (MaxHealthTrue * 2.5)) Speed *= 1.1875;
		else if (CurrentHealth >= (MaxHealthTrue * 2.25)) Speed *= 1.15625;
		else if (CurrentHealth >= (MaxHealthTrue * 2.0)) Speed *= 1.125;
		else if (CurrentHealth >= (MaxHealthTrue * 1.75)) Speed *= 1.09375;
		else if (CurrentHealth >= (MaxHealthTrue * 1.5)) Speed *= 1.0625;
		else if (CurrentHealth >= (MaxHealthTrue * 1.25)) Speed *= 1.03125;
		else if (CurrentHealth >= (MaxHealthTrue * 0.75)) Speed *= 1.00;
		else if (CurrentHealth >= (MaxHealthTrue * 0.5)) Speed *= 0.9375;
		else if (CurrentHealth >= (MaxHealthTrue * 0.25)) Speed *= 0.875;
		else Speed *= 0.8125;

		if (Owner.CountInv("PowerStrength")) Speed *= 1.125;
		
		if (Owner.CountInv("PowerWineBuffWeak")) Speed *= frandom(0.965,0.975);
		if (Owner.CountInv("PowerWineBuffStrong")) Speed *= frandom(0.89,0.91);
		if (Owner.CountInv("PowerWineBuffStrongest")) Speed *= frandom(0.80,0.84);
		if (Owner.CountInv("PowerWineBuffStrongestEven")) Speed *= frandom(0.69,0.75);

		if (owner.CountInv("KnightGownItem")) Speed *= 0.99;
		if (owner.CountInv("KnightGownItem2")) Speed *= 0.97;
		if (owner.CountInv("KnightGownItem3")) Speed *= 0.94;
		if (owner.CountInv("KnightGownItem4")) Speed *= 0.90;

		//Console.Printf("SpeedX: %.8f", Speed);
		return Speed; 
	}
}