class DinahBackgroundStuff : Inventory
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;

	int TrueGameSkill;
	int PlayerLevel;

	int HPRegenBonPenTimer;
	int HPRegenTimer;
	int HPRegenTimerMax;
	
	int CurrentHealth;
	int MaxHealthTrue;
	int MaxHealthLimit;
	int SurvivalRate;
	
	int ClassCheck;
	
	int buttons;

	default 
	{
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	override void DoEffect()
	{
		TrueGameSkill = skill;
		if (ClassCheck == 0)
		{
			HPRegenTimerMax = 7000 - (owner.player.mo.stamina * 35);
		}
		buttons = owner.GetPlayerInput(INPUT_BUTTONS);
		CurrentHealth = owner.player.mo.health;
		MaxHealthTrue = (owner.spawnhealth() + owner.player.mo.stamina);

		if (CurrentHealth > 0)
		{
			//Console.Printf("Health: %d / %d", CurrentHealth, MaxHealthTrue);

			if (CurrentHealth < MaxHealthTrue)
			{
				int inc = 20;

				if (owner.CountInv("PowerStrength")) inc = floor(inc * 2);

				if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) inc = floor(inc * 0.4);
				if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) inc = floor(inc * 0.5);
				if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) inc = floor(inc * 0.6);
				if (buttons & BT_JUMP) inc = floor(inc * 0.4);
				if (buttons & BT_CROUCH) inc = floor(inc * 1.8);

				if (Owner.CountInv("PowerWineBuffWeak")) inc = floor(inc * 1.5);
				if (Owner.CountInv("PowerWineBuffStrong")) inc = floor(inc * 2.25);
				if (Owner.CountInv("PowerWineBuffStrongest")) inc = floor(inc * 3.25);

				if (CurrentHealth <= (MaxHealthTrue * 0.02)) inc = floor(inc * 20);
				else if (CurrentHealth <= (MaxHealthTrue * 0.10)) inc = floor(inc * 5);
				else if (CurrentHealth <= (MaxHealthTrue * 0.25)) inc = floor(inc * 1.25);
				else if (CurrentHealth <= (MaxHealthTrue * 0.50)) inc = floor(inc * 1.0625);
				
				HPRegenTimer += inc;
				//Console.Printf("RegenTimer: %d / %d  (inc: %d)", HPRegenTimer, HPRegenTimerMax, inc);
			}
			else
			{
				HPRegenTimer = 0;
			}

			if (HPRegenTimer > HPRegenTimerMax)
			{
				HPRegenTimer -= HPRegenTimerMax;
				if (HPRegenTimer < 0) HPRegenTimer = 0;
				HPRegenTimerMax = 7000 - (owner.player.mo.stamina * 35);
				
				if (CurrentHealth < MaxHealthTrue)
				{
					CurrentHealth += randompick(1,1,1,1,1,1,1,1,1,2);
					if (CurrentHealth >= MaxHealthTrue) CurrentHealth = MaxHealthTrue;
					owner.player.health = owner.player.mo.health = CurrentHealth;
				}
			}
		}
		
		// Survival Rate [Buddha]
		SurvivalRate = 100; // out of 10000 [1%]
		SurvivalRate += (PlayerLevel * 5); // +0.05% per level
		
		if (owner.CountInv("KnightGownItem")) SurvivalRate += 625;
		if (owner.CountInv("KnightGownItem2")) SurvivalRate += 1250;
		if (owner.CountInv("KnightGownItem3")) SurvivalRate += 2500;
		
		if (SurvivalRate > 7500) SurvivalRate = 7500;
		int SurviveRNGVal = random[statitem](1,10000); // Based on 0.01% to 100.00%
		if (SurviveRNGVal <= SurvivalRate) owner.player.cheats |= CF_BUDDHA; else owner.player.cheats &= ~CF_BUDDHA;

		bool debugsurvival = true;
		if (debugsurvival)
		{
			if (SurviveRNGVal <= SurvivalRate) Console.Printf("    \cdSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
																		else Console.Printf("    \cgSurvival Rate % Roll / Rate: %d / %d, \cx[cheatbits: %d]", SurviveRNGVal, SurvivalRate, owner.player.cheats);
		}

		owner.player.health = owner.player.mo.health = CurrentHealth;

		ClassCheck++;
		super.DoEffect();
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		let weapon = owner.player.ReadyWeapon;
		TrueGameSkill = skill;
		
		// ******************
		// ******************
		// **Offensive Code**
		// ******************
		// ******************
		if (!passive && damage > 0) // If the owner [usually the player] of the item is the ATTACKER
		{
			//Console.Printf("Damage (!passive): %d", newdamage);

			if (Skill == SKILL_VERY_HARD) newdamage *= 0.75;
			if (Skill == SKILL_HARD) newdamage *= 0.875;
			if (Skill == SKILL_NORMAL) newdamage *= 1.00;
			if (Skill == SKILL_EASY) newdamage *= 1.125;
			if (Skill == SKILL_VERY_EASY) newdamage *= 1.25;

			if (Owner.CountInv("PowerInvisibility")) newdamage *= frandompick(1.00,1.00,1.125,1.125,1.25);

			//Console.Printf("FDamage (!passive): %d", newdamage);
		}
		
		// ******************
		// ******************
		// **Defensive Code**
		// ******************
		// ******************
		if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
		{
			//Console.Printf("Damage (passive): %d", newdamage);

			if (Skill == SKILL_VERY_EASY) newdamage *= 0.75;
			if (Skill == SKILL_EASY) newdamage *= 0.875;
			if (Skill == SKILL_NORMAL) newdamage *= 1.00;
			if (Skill == SKILL_HARD) newdamage *= 1.125;
			if (Skill == SKILL_VERY_HARD) newdamage *= 1.25;
			
			if (Owner.CountInv("PowerStrength")) newdamage *= frandompick(0.8,0.9,0.9,0.9,1.0);
			if (Owner.CountInv("PowerInvisibility")) newdamage *= frandompick(1.00,1.00,0.875,0.875,0.75);

			//Console.Printf("FDamage (passive): %d", newdamage);
		}
	}
	
	override double GetSpeedFactor() 
	{
		let weapon = owner.player.ReadyWeapon;
		CurrentHealth = owner.health;
		MaxHealthTrue = (owner.spawnhealth() + owner.player.mo.stamina);

		Speed = 1.00;
		
		Speed += (PlayerLevel * 0.0125);

		if (CurrentHealth >= (MaxHealthTrue * 3)) Speed *= 1.25;
		else if (CurrentHealth >= (MaxHealthTrue * 2.75)) Speed *= 1.21875;
		else if (CurrentHealth >= (MaxHealthTrue * 2.5)) Speed *= 1.1875;
		else if (CurrentHealth >= (MaxHealthTrue * 2.25)) Speed *= 1.15625;
		else if (CurrentHealth >= (MaxHealthTrue * 2.0)) Speed *= 1.125;
		else if (CurrentHealth >= (MaxHealthTrue * 1.75)) Speed *= 1.09375;
		else if (CurrentHealth >= (MaxHealthTrue * 1.5)) Speed *= 1.0625;
		else if (CurrentHealth >= (MaxHealthTrue * 1.25)) Speed *= 1.03125;
		else if (CurrentHealth >= (MaxHealthTrue * 0.75)) Speed *= 1.00;
		else if (CurrentHealth >= (MaxHealthTrue * 0.5)) Speed *= 0.9375;
		else if (CurrentHealth >= (MaxHealthTrue * 0.25)) Speed *= 0.875;
		else Speed *= 0.8125;

		if (Owner.CountInv("PowerStrength")) Speed *= 1.125;
		
		if (Owner.CountInv("PowerWineBuffWeak")) Speed *= frandom(0.95,0.97);
		if (Owner.CountInv("PowerWineBuffStrong")) Speed *= frandom(0.88,0.92);
		if (Owner.CountInv("PowerWineBuffStrongest")) Speed *= frandom(0.78,0.86);

		//Console.Printf("SpeedX: %.8f", Speed);
		return Speed; 
	}
}