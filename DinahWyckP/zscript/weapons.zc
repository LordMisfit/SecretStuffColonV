// Base Custom Weapon Class
class DDWeapon : Weapon
{
	int kickspeed;
	int punchspeed;
	default
	{
	}
	
	action void A_Destroy()
	{
		self.Destroy();
	}
	
	action void A_KickDecelerate(int minval = 0, int maxval = 2, int chance = 192)
	{
		bool debug = false;
		int prev = invoker.kickspeed;
		if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) chance = ceil(chance * frandom(0.25,0.75));
		if (debug) Console.Printf("chance: %d", chance);
		if (random(1,256) <= chance)
		{
			invoker.kickspeed -= random(minval,maxval);
			if (invoker.kickspeed < 0) invoker.kickspeed = 0;
			if (debug) Console.Printf("%d [%d]", invoker.kickspeed, prev);
		}
	}

	action void A_KickTicCheck()
	{
		if (invoker.kickspeed >= 8 && invoker.kickspeed <= 17)
		{
			if (random(1,8) == 1) { A_SetTics(0); }
		}
		if (invoker.kickspeed >= 16 && invoker.kickspeed <= 31)
		{
			if (random(1,6) == 1) { A_SetTics(0); }
		}
		if (invoker.kickspeed >= 32 && invoker.kickspeed <= 47)
		{
			if (random(1,4) == 1) { A_SetTics(0); }
		}
		if (invoker.kickspeed >= 48 && invoker.kickspeed <= 64)
		{
			if (random(1,2) == 1) { A_SetTics(0); }
		}
	}
	
	action void A_KickTicCheck2(int minrange = 0, int maxrange = 8)
	{
		if (random(1,64) <= (random(minrange,maxrange) + invoker.kickspeed)) { A_SetTics(0); }
	}
	
	action void A_KickAccelerate(int minval = 1, int maxval = 1, int limit = 48, int chance = 256)
	{
		bool debug = false;
		int prev = invoker.kickspeed;

		if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) chance = floor(chance * frandom(1.125,1.375));
		if (debug) Console.Printf("chance: %d", chance);
		int chance2;
		if (chance > 256) chance2 = (chance % 256);
		if (random(1,256) <= chance) invoker.kickspeed += random(minval,maxval);
		if (random(1,256) <= chance2) invoker.kickspeed += random(minval,maxval);

		if (random(1,256) <= chance) { if (invoker.kickspeed == 5) invoker.kickspeed++; }
		if (random(1,256) <= chance2) { if (invoker.kickspeed == 5) invoker.kickspeed++; }
		if (random(1,256) <= chance) { if (invoker.kickspeed == 8) invoker.kickspeed++; }
		if (random(1,256) <= chance2) { if (invoker.kickspeed == 8) invoker.kickspeed++; }
		if (random(1,256) <= chance) { if (invoker.kickspeed == 10) invoker.kickspeed++; }
		if (random(1,256) <= chance2) { if (invoker.kickspeed == 10) invoker.kickspeed++; }
		if (invoker.kickspeed >= 11) 
		{
			if (random(1,256) <= chance) invoker.kickspeed++;
			if (random(1,256) <= chance2) invoker.kickspeed++;
			if (random(1,256) <= chance) { if (invoker.kickspeed == 17) invoker.kickspeed++; }
			if (random(1,256) <= chance2) { if (invoker.kickspeed == 17) invoker.kickspeed++; }
			if (random(1,256) <= chance) { if (invoker.kickspeed == 20) invoker.kickspeed++; }
			if (random(1,256) <= chance2) { if (invoker.kickspeed == 20) invoker.kickspeed++; }
			if (random(1,256) <= chance) { if (invoker.kickspeed == 23) invoker.kickspeed++; }
			if (random(1,256) <= chance2) { if (invoker.kickspeed == 23) invoker.kickspeed++; }
			if (random(1,256) <= chance) { if (invoker.kickspeed == 25) invoker.kickspeed++; }
			if (random(1,256) <= chance2) { if (invoker.kickspeed == 25) invoker.kickspeed++; }
			if (random(1,256) <= chance) { if (invoker.kickspeed >= 26) invoker.kickspeed++; }
			if (random(1,256) <= chance2) { if (invoker.kickspeed >= 26) invoker.kickspeed++; }
		}
		if (invoker.kickspeed > limit) invoker.kickspeed = limit;
		if (debug) Console.Printf("%d [%d]", invoker.kickspeed, prev);
	}
/*
	Fire:
		GBLS A 0 A_PlaySoundEx("sa/rickroll", "Body", 1)

		GBLS A 0 A_FireProjectile("BadMusic", 345.5, 0, 0, 1) // WNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 323, 0, 0, 1) // NW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 300.5, 0, 0, 1) // NNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 278, 0, 0, 1) // West Angle
		GBLS A 0 A_FireProjectile("BadMusic", 255.5, 0, 0, 1) // WSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 233, 0, 0, 1) // SW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 210.5, 0, 0, 1) // SSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 188, 0, 0, 1) // South Angle
		GBLS A 0 A_FireProjectile("BadMusic", 165.5, 0, 0, 1) // SSE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 143, 0, 0, 1) // SE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 120.5, 0, 0, 1) // ESE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 98, 0, 0, 1) // East Angle
		GBLS A 0 A_FireProjectile("BadMusic", 75.5, 0, 0, 1) // ENE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 53, 0, 0, 1) // NE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 30.5, 0, 0, 1) // NNE Angle
		GBLS A 1 A_FireProjectile("BadMusic", 8, 0, 0, 1) // North Angle

		GBLS A 0 A_FireProjectile("BadMusic", 353.5, 0, 0, 1) // WNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 331, 0, 0, 1) // NW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 308.5, 0, 0, 1) // NNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 286, 0, 0, 1) // West Angle
		GBLS A 0 A_FireProjectile("BadMusic", 263.5, 0, 0, 1) // WSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 241, 0, 0, 1) // SW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 218.5, 0, 0, 1) // SSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 196, 0, 0, 1) // South Angle
		GBLS A 0 A_FireProjectile("BadMusic", 173.5, 0, 0, 1) // SSE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 151, 0, 0, 1) // SE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 128.5, 0, 0, 1) // ESE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 106, 0, 0, 1) // East Angle
		GBLS A 0 A_FireProjectile("BadMusic", 83.5, 0, 0, 1) // ENE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 61, 0, 0, 1) // NE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 38.5, 0, 0, 1) // NNE Angle
		GBLS A 1 A_FireProjectile("BadMusic", 16, 0, 0, 1) // North Angle

		GBLS A 0 A_FireProjectile("BadMusic", 9.5, 0, 0, 1) // WNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 347, 0, 0, 1) // NW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 324.5, 0, 0, 1) // NNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 302, 0, 0, 1) // West Angle
		GBLS A 0 A_FireProjectile("BadMusic", 279.5, 0, 0, 1) // WSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 257, 0, 0, 1) // SW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 234.5, 0, 0, 1) // SSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 212, 0, 0, 1) // South Angle
		GBLS A 0 A_FireProjectile("BadMusic", 189.5, 0, 0, 1) // SSE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 167, 0, 0, 1) // SE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 144.5, 0, 0, 1) // ESE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 122, 0, 0, 1) // East Angle
		GBLS A 0 A_FireProjectile("BadMusic", 99.5, 0, 0, 1) // ENE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 77, 0, 0, 1) // NE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 54.5, 0, 0, 1) // NNE Angle
		GBLS A 1 A_FireProjectile("BadMusic", 32, 0, 0, 1) // North Angle

		GBLS A 0 A_FireProjectile("BadMusic", 337.5, 0, 0, 1) // WNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 315, 0, 0, 1) // NW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 292.5, 0, 0, 1) // NNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 270, 0, 0, 1) // West Angle
		GBLS A 0 A_FireProjectile("BadMusic", 247.5, 0, 0, 1) // WSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 225, 0, 0, 1) // SW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 202.5, 0, 0, 1) // SSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 180, 0, 0, 1) // South Angle
		GBLS A 0 A_FireProjectile("BadMusic", 157.5, 0, 0, 1) // SSE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 135, 0, 0, 1) // SE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 112.5, 0, 0, 1) // ESE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 90, 0, 0, 1) // East Angle
		GBLS A 0 A_FireProjectile("BadMusic", 67.5, 0, 0, 1) // ENE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 45, 0, 0, 1) // NE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 22.5, 0, 0, 1) // NNE Angle
		GBLS A 1 A_FireProjectile("BadMusic", 0, 0, 0, 1) // North Angle

		GBLS A 0 A_FireProjectile("BadMusic", 329.5, 0, 0, 1) // WNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 307, 0, 0, 1) // NW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 284.5, 0, 0, 1) // NNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 262, 0, 0, 1) // West Angle
		GBLS A 0 A_FireProjectile("BadMusic", 239.5, 0, 0, 1) // WSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 217, 0, 0, 1) // SW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 194.5, 0, 0, 1) // SSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 172, 0, 0, 1) // South Angle
		GBLS A 0 A_FireProjectile("BadMusic", 149.5, 0, 0, 1) // SSE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 127, 0, 0, 1) // SE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 104.5, 0, 0, 1) // ESE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 82, 0, 0, 1) // East Angle
		GBLS A 0 A_FireProjectile("BadMusic", 59.5, 0, 0, 1) // ENE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 37, 0, 0, 1) // NE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 14.5, 0, 0, 1) // NNE Angle
		GBLS A 1 A_FireProjectile("BadMusic", -8, 0, 0, 1) // North Angle

		GBLS A 0 A_FireProjectile("BadMusic", 321.5, 0, 0, 1) // WNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 299, 0, 0, 1) // NW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 276.5, 0, 0, 1) // NNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 254, 0, 0, 1) // West Angle
		GBLS A 0 A_FireProjectile("BadMusic", 231.5, 0, 0, 1) // WSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 209, 0, 0, 1) // SW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 186.5, 0, 0, 1) // SSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 164, 0, 0, 1) // South Angle
		GBLS A 0 A_FireProjectile("BadMusic", 141.5, 0, 0, 1) // SSE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 119, 0, 0, 1) // SE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 96.5, 0, 0, 1) // ESE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 74, 0, 0, 1) // East Angle
		GBLS A 0 A_FireProjectile("BadMusic", 51.5, 0, 0, 1) // ENE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 29, 0, 0, 1) // NE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 6.5, 0, 0, 1) // NNE Angle
		GBLS A 1 A_FireProjectile("BadMusic", -16, 0, 0, 1) // North Angle

		GBLS A 0 A_FireProjectile("BadMusic", 305.5, 0, 0, 1) // WNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 283, 0, 0, 1) // NW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 260.5, 0, 0, 1) // NNW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 238, 0, 0, 1) // West Angle
		GBLS A 0 A_FireProjectile("BadMusic", 215.5, 0, 0, 1) // WSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 193, 0, 0, 1) // SW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 170.5, 0, 0, 1) // SSW Angle
		GBLS A 0 A_FireProjectile("BadMusic", 148, 0, 0, 1) // South Angle
		GBLS A 0 A_FireProjectile("BadMusic", 125.5, 0, 0, 1) // SSE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 103, 0, 0, 1) // SE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 80.5, 0, 0, 1) // ESE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 58, 0, 0, 1) // East Angle
		GBLS A 0 A_FireProjectile("BadMusic", 35.5, 0, 0, 1) // ENE Angle
		GBLS A 0 A_FireProjectile("BadMusic", 13, 0, 0, 1) // NE Angle
		GBLS A 0 A_FireProjectile("BadMusic", -9.5, 0, 0, 1) // NNE Angle
		GBLS A 1 A_FireProjectile("BadMusic", -32, 0, 0, 1) // North Angle

		GBLS A 0 A_Refire
		Goto Ready
	Spawn:
		CSAW A -1
		Stop
	}
*/
}

class BadMusic : DDProjectile
{
	default
	{
		Radius 16;
		Height 8;
		Speed 50;
		DamageFunction (random(1,2));
		Projectile;
		-SOLID
		+BLOODLESSIMPACT
		+DONTREFLECT
		+NOBLOCKMAP
		+RIPPER
		+RANDOMIZE
		+NOEXTREMEDEATH
		+STEPMISSILE
		-ACTIVATEIMPACT
		-ACTIVATEMCROSS
		-ACTIVATEPCROSS
		-CANPUSHWALLS
		-CANBLAST
		DamageType "Musak";
		RenderStyle "translucent";
    Alpha 0.5;
    Scale 0.06;
		Obituary "$OB_MPPLASMARIFLE";
	}
	States
	{
		Spawn:
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			MUSN A 1;
			Goto Death; // Loop
		Death:
			TNT1 A 1;
			Stop;
	}
}

//**************
//* Grimophone *
//**************
class Grimophone : DDWeapon replaces BFG9000
{
	int musictype;
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 800;
		Weapon.Ammotype1 "musicammo";
		Weapon.Ammouse1 1;
		Weapon.Ammotype2 "musicammo";
		Weapon.Ammouse2 1;
		Weapon.Ammogive1 20;
		Weapon.Ammogive2 0;
		Weapon.SlotNumber 7;
		inventory.pickupsound "misc/w_pkup"; //"Dinah/marvelous"
		Inventory.Pickupmessage "Grimophone";
		Tag "Grimophone";
		//SpawnID 31981
		+FLOATBOB
	}
	States
	{
		Spawn:
			RPLY P 1;
			loop;
		Ready:
			RPLY A 1
			{
				A_StopSound(65);
				A_WeaponReady();
			}
			loop;
		Select:
			RPLY A 1
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_Raise(12); }
				A_Raise(12);
			}
			Loop;
		Deselect:
			RPLY A 1
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_Lower(12); }
				A_Lower(12);
			}
			TNT1 A 0 A_StopSound(65);
			Loop;
		Fire:
			RPLY A 0 
			{
				invoker.musictype = random(1,16);
				if (invoker.musictype >= 1 && invoker.musictype <= 14) { A_StartSound("grimophone/jam",65,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.92,1.08)); }
				else if (invoker.musictype == 15) { A_StartSound("sa/rickroll",65,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.92,1.08)); }
				else if (invoker.musictype == 16) { A_StartSound("sa/vuvuzela",65,CHANF_DEFAULT,1.0,ATTN_NORM,frandom(0.92,1.08)); }
			}
		Fire2:
			NULL A 0 
			{
				A_GunFlash();
			}
			RPLY B 3 Bright A_FireProjectile("recordshot",0,1);
			RPLY C 3;
			RPLY B 3 Bright A_FireProjectile("recordshot",0,0);
			RPLY C 3;
			RPLY C 0 A_Refire("Fire2");
			RPLY A 0 A_StopSound(65);
			Goto Ready;
	}
}

class HandToHand : DDWeapon replaces Fist
{
	default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 80;
		+WEAPON.NOALERT
		+WEAPON.MELEEWEAPON
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Tag "Hand to Hand";
		Obituary "%o was give a good kick in the arse by %k.";
	}
	
	states
	{
		Ready:
			DHND A 1
			{
				A_KickDecelerate();
				A_WeaponReady(); // WRF_ALLOWUSER4
			}
			loop;
		Deselect:
			DHND A 1
			{
				A_KickDecelerate();
				A_Lower(18);
			}
			loop;
		Select:
			DHND A 1
			{
				A_KickDecelerate();
				A_Raise(18);
			}
			loop;
		Fire:
			TNT1 A 0
			{
				if (random(1,8) <= 7) 
				{ 
					if (random(1,2) == 1)
					{
						return resolvestate("PunchStartL"); 
					}
					else
					{
						return resolvestate("PunchStartR"); 
					}
				}
				else 
				{
					return resolvestate("KickStart"); 
				}
				return resolvestate(null);
			}
		PunchStartL:
			DHND B 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
			}
			DPUN A 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
				if (random(1,64) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				A_StartSound("fistswingmedium",CHAN_BODY);
				
				double recl = frandom(-0.125,-0.075);
				int dmg = random(9,15);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
					recl *= 2.5;
				}
				A_Recoil(recl);
				A_CustomPunch(dmg,1,CPF_NOTURN,"FistPuff",64,0,0,"","","");
			}
			DPUN B 4
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
			}
			DPUN A 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
			}
			DHND B 4
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
				A_ReFire();
			}
			goto Ready;
		PunchStartR:
			DHND C 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
			}
			DPUN C 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
				if (random(1,64) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				A_StartSound("fistswingmedium",CHAN_BODY);
				
				double recl = frandom(-0.125,-0.075);
				int dmg = random(9,15);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
					recl *= 2.5;
				}
				A_Recoil(recl);
				A_CustomPunch(dmg,1,CPF_NOTURN,"FistPuff",64,0,0,"","","");
			}
			DPUN D 4
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
			}
			DPUN C 3
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
			}
			DHND B 4
			{
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) { A_SetTics(ceil(tics*frandom(0.34,0.67))); }
				A_ReFire();
			}
			goto Ready;
		KickStart:
			TNT1 A 0 
			{
				A_KickAccelerate();
			}
			TNT1 A 1
			{
				if (random(1,4) == 1)
				{
					A_SetTics(0);
				}
				else
				{
					A_KickTicCheck2();
				}
			}
			TNT1 AAA 1
			{
				A_KickTicCheck2();
			}
			TNT1 A 1
			{
				if (random(1,4) == 1)
				{
					A_SetTics(0);
				}
				else
				{
					A_KickTicCheck2();
				}
			}
			DKIC A 1
			{
				A_KickTicCheck();
			}
			DKIC B 1
			{
				A_StartSound("fistswingmedium0",CHAN_BODY);
				A_KickTicCheck();
			}
			DKIC C 1
			{
				if (random(1,256) >= 240)
				{
					A_StopSound(CHAN_VOICE);
					A_StartSound("Dinah/jump",CHAN_VOICE); 
				} 
				A_KickTicCheck();
			}
			DKIC DEFG 1
			{
				A_KickTicCheck();
			}
			DKIC H 1
			{
				double recl = frandom(-0.125,-0.075);
				int dmg = random(28,52);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
					recl *= 2.5;
				}
				//Console.Printf("dmg: %d, recl: %.8f", dmg, recl);
				A_Recoil(recl);
				A_CustomPunch(dmg,1,CPF_NOTURN,"KickPuff",104,0,0,"","","");
			}
			DKIC GFEDCBA 1
			{
				A_KickTicCheck();
			}
			TNT1 A 1
			{
				if (random(1,4) == 1)
				{
					A_SetTics(0);
				}
				else
				{
					A_KickTicCheck2();
				}
			}
			TNT1 AAA 1
			{
				A_KickTicCheck2();
			}
			TNT1 A 1
			{
				if (random(1,4) == 1)
				{
					A_SetTics(0);
				}
				else
				{
					A_KickTicCheck2();
				}
			}
			DKIC A 0 A_Refire("Fire");
			goto KickEnd;
		// KICK END
		KickEnd:
			TNT1 A 0
			{
				A_KickDecelerate();
			}
			goto Ready;
	}
}

class KickPuff : DDPuff
{
	default
	{
		Tag "Kick";
		Species "Players";
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		RenderStyle "Translucent";
		ProjectileKickback 375; // 1500
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		damagetype "Kick";
		SeeSound "null"; // "FistHit"
		AttackSound "null";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				int dmg = random(28,52);
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		Spawn2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				user_randompain = 4;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
				
				int dmg = random(28,52);
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		Melee2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				user_randompain = 4;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }

				int dmg = random(28,52);
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56); 
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		Crash2:
			TNT1 A 2 
			{
				int dist = randompick(3,3,4);
				A_RadiusThrust(375,dist,0,dist);
			}
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class KickPuffNoThrust : KickPuff
{
	default
	{
		ProjectileKickback 0;
		+NODAMAGETHRUST
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 4;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }

				int dmg = random(28,52);
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		Spawn2:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				user_randompain = 4;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
				
				int dmg = random(28,52);
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		Melee2:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				user_randompain = 4;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }
				
				int dmg = random(28,52);
				int radi = 24 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		Crash2:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

class FistPuff : DDPuff
{
	default
	{
		Tag "Fist";
		Species "Players";
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+FORCERADIUSDMG +PUFFGETSOWNER +PUFFONACTORS 
		+THRUSPECIES +MTHRUSPECIES
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		damagetype "Fist";
		SeeSound "null"; // "FistHit"
		AttackSound "null";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				user_randompain = 44;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }

				int dmg = random(9,15) * frandom(0.04166667,0.125);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		SpawnSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Melee:
			TNT1 A 0
			{
				user_randompain = 44;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }

				int dmg = random(9,15) * frandom(0.04166667,0.125);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserk", 56); 
				} else { A_StartSound("FistHit", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		MeleeSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
		Crash:
			PUFF C 0
			{
				user_randompain = 44;
				if (random(1,100) <= user_randompain) { bFORCEPAIN = true; }

				int dmg = random(9,15) * frandom(0.04166667,0.125);
				int radi = 16 * frandom(0.84375,1.15625);
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) 
				{
					dmg *= 10;
					radi *= 2.5;
					A_StartSound("fisthitberserkwall", 56);
				} else { A_StartSound("FistHitWall", 56); }

				A_Explode((dmg * frandom(0.05,0.15)), radi, 0, 0, (radi*0.25));
			}
		CrashSparks:
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			TNT1 A 2;
			Stop;
	}
}

// Cricket Bat
class CricketShieldPart : ShieldPart
{
	default
	{
		-AIMREFLECT
		+DEFLECT
		Radius 8; // out of 32
		Height 16; // out of 32
		Scale 0.5;
	}
	states
	{
		Spawn:
			HEXA C 2 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				A_FadeTo(0.125,0.125);
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON);
			}
			stop;
	}
}

class CricketShieldPartNoReflect : ShieldPartNoReflect
{
	default
	{
		Radius 8; // out of 32
		Height 16; // out of 32
		Scale 0.5;
	}
	states
	{
		Spawn:
			HEXA A 2 bright NoDelay
			{
				//A_SetTics(randompick(1,2,2,2,3));
				A_FadeTo(0.125,0.125);
				//if (CountInv("PlayingDoom64")) { A_SetSize(19,19); }
			}
			stop;
		Pain:
			TNT1 A 1 bright 
			{
				A_StartSound("CricketBat/ShieldHit", CHAN_WEAPON);
			}
			stop;
	}
}

//***************
//* Cricket Bat *
//***************
class CricketBat : DDWeapon replaces Pistol
{
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 100;
		Weapon.SlotNumber 2;
		Weapon.Kickback 50;
		Weapon.AmmoType2 "MalletAmmo";
		Weapon.AmmoGive2 5;
		Weapon.AmmoUse2 1;
		+WEAPON.NOALERT
		+WEAPON.MELEEWEAPON
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "SPBTA0";
		Inventory.Pickupsound "DinahWeap";
		Inventory.PickupMessage "Cricket Bat";
		Tag "Cricket Bat";
		Obituary "%k scored a point with %o.";
	}
	
	action double A_SetShieldPieceDist(double basedist = 32.0)
	{
		double result = basedist;
		return result;
	}
	
	action void A_CricketBatShield()
	{
		string vispart = "CricketShieldPartNoReflect";
		if (random(1,16) <= 5) vispart = "CricketShieldPart";

		double yoffset = frandompick(-0.3125,0,0.3125);

		double distx, disty, distz;
		double sa = sin(angle);
		double ca = cos(angle);
		//Console.Printf("angle sine: %.3f, angle cosine: %.3f", sa, ca);
		double sp = sin(pitch);
		double cp = cos(pitch);
		//Console.Printf("pitch sine: %.3f, pitch cosine: %.3f", sp, cp);
		int m = frandom(15.0,17.0);

		distx = (m * frandom(0.925,0.95));
		disty = 0.0;
		distz = (height * 0.5) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty = 10.0;
		distz = ((height * 0.5) - 10.0) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		disty = -10.0;
		distz = ((height * 0.5) + 10.0) + yoffset;
		A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		
		if (random(1,8) <= 7)
		{
			distx = (m * frandom(0.925,0.95));
			disty = 0.0;
			distz = (height * 0.5) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = 10.0;
			distz = ((height * 0.5) - 10.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = -10.0;
			distz = ((height * 0.5) + 10.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}

		if (random(1,12) <= randompick(3,3,4,4,4,4,4,5,5))
		{
			distx = (m * 0.5);
			disty = 3.75;
			distz = ((height * 0.5) + 5.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = -3.75;
			distz = ((height * 0.5) + 5.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = 3.75;
			distz = ((height * 0.5) - 5.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
			disty = -3.75;
			distz = ((height * 0.5) - 5.0) + yoffset;
			A_SpawnItemEx(vispart, (cos(-pitch) * A_SetShieldPieceDist(distx)), disty, (A_SetShieldPieceDist(distz) + (sin(-pitch) * A_SetShieldPieceDist(distx))), 0, 0, 0, 0, SXF_SETMASTER|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_NOCHECKPOSITION);
		}

		let MiscItem = PlayerStatItem(player.mo.FindInventory("PlayerStatItem"));
		if (MiscItem) MiscItem.CricketBatBuffTimer = randompick(1,1,1,1,1,1,1,1,1,2);
	}
	
	States
	{
		Pickup:
			SPBT A 0;
			SPBT A 0 A_StartSound("misc/w_pkup",CHAN_WEAPON);
			SPBT A 0;
			Fail;

		Spawn:
			SPBT A 6;
			loop;
		Ready:
			DBID A 1 A_WeaponReady(WRF_ALLOWUSER4);
			loop;
		Deselect:
			DBID A 1
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_Lower(12); }
				A_Lower(12);
			}
			loop;
		Select: 
			DBID A 1
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_Raise(12); }
				A_Raise(12);
			}
			loop;
		Fire:
			DBID A 1
			{
			}
			DBID B 1
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(0); }
			}
			DBID C 1
			{
			}
			DBID D 1 
			{
				A_StartSound("MalletSwing",CHAN_WEAPON);
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(0); }
			}
			DBID E 1 
			{
			}
			DBID F 1 
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(0); }
			}
			DBID G 1 
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1))
				{
					A_CustomPunch ((Random(6, 8)*10), FALSE, 0, "BatPuff", 112);
				}
				else
				{
					A_CustomPunch (Random(6, 8), FALSE, 0, "BatPuff", 112);
				}
			}
			DBID H 1 
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(0); }
			}
			DBID IJCCBA 2
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(randompick(0,1,1,1,1,1)); }
			}
			goto Ready;
		AltFire:
			DBID A 1
			{
			}
			DBID B 1 
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(0); }
			}
			DBID C 1
			{
			}
			DBID D 1
			{
				A_StartSound("MalletSwing",CHAN_WEAPON);
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(0); }
			}
			DBID E 1
			{
			}
			DBID F 1 
			{
				A_StartSound("croquet/ballfire",CHAN_WEAPON);
				if (random(1,8) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(0); }
			}
			DBID G 1 
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1))
				{
					A_FireProjectile("MalletShotBerserk",0,1,0,0);
				}
				else
				{
					A_FireProjectile("MalletShot",0,1,0,0);
				}
			}
			DBID H 1 
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(0); }
			}
			DBID IJC 2 
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(1); }
			}
			DBID BA 3
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(random(1,2)); }
			}
			goto Ready;
			
		User4:
		Guard:
			DBIG A 1
			{
				A_CricketBatShield();
				//A_SetTics(random(1,2));
			}
			DBIG A 0 A_Refire("User4");
			goto Ready;
	}
}

// Blunderaxe
class Blunderaxe : DDWeapon replaces Shotgun
{
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 200;
		Weapon.SlotNumber 3;
		Weapon.Kickback 40;
		Weapon.AmmoType2 "BlunderAmmo";
		Weapon.AmmoGive2 6;
		Weapon.AmmoUse2 1;
		+WEAPON.MELEEWEAPON
		+WEAPON.NOALERT
		+PUFFONACTORS
		+FLOATBOB
		Inventory.Icon "BLAXP0";
		Inventory.PickupMessage "Blunderaxe";
		inventory.pickupsound "misc/w_pkup"; //"Dinah/marvelous"
		Tag "Blunderaxe";
		Obituary "%k used %o for target practice.";
	}
	
	States
	{
		Spawn:
			BLAX P 0 NoDelay;
			BLAX P 0 
			{
				if (bDROPPED) { SetStateLabel("Dropp"); }
			}
			BLAX P 0
			{
				if (random(1,8) == 1)
				{
					A_SpawnItemEx("Scrambler",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					bCOUNTITEM = false;
					Thing_Remove(0); 
				}
			}
			goto Idle;
		Dropp:
			BLAX P 0
			{
				if (random(1,64) == 1)
				{
					A_SpawnItemEx("Scrambler",0.0,0.0,0.0,0.0,0.0,0.0,SXF_NOCHECKPOSITION);
					bCOUNTITEM = false;
					Thing_Remove(0); 
				}
			}
			goto Idle;

		Idle:
			BLAX P 6;
			loop;
		Ready:
			BLAX A 1 A_WeaponReady;
			loop;
		Deselect:
			BLAX A 1
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_Lower(12); }
				A_Lower(12);
			}
			loop;
		Select: 
			BLAX A 1
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_Raise(12); }
				A_Raise(12);
			}
			loop;
		Fire:
			BLAX D 1;
			BLAX F 1;
			TNT1 A 1;
			BLAX G 2 
			{
				A_StartSound("Blunderswing",CHAN_WEAPON);
				if (random(1,32) <= 1 && !CountInv("PlayingStrife",AAPTR_PLAYER1)) { A_AlertMonsters(); }
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(1); }
			}
			BLAX HI 2 
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(1); }
			}
			BLAX J 2 
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1))
				{
					A_SetTics(1);
					A_CustomPunch ((Random(16, 20)*10), FALSE, 0, "BlunderPuff", 96);
				}
				else
				{
					A_CustomPunch (Random(16, 20), FALSE, 0, "BlunderPuff", 96);
				}
			}
			BLAX KLMN 3 
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(random(1,2)); }
			}
			BLAX O 4
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(randompick(1,2,2,3,3,3)); }
			}
			goto Ready;
		AltFire:
			BLAX A 0 
			{
				A_StartSound("blunderfire",CHAN_WEAPON);
				if (random(1,32) <= 31) { A_AlertMonsters(); }
			}
			BLAX B 3 Bright
			{
				if (random(1,16) <= 1)
				{
					A_FireProjectile("BlunderShot",random(-1,1),0,0,0,0,random(1,1));
					A_FireProjectile("BlunderShot",random(-9,9),0,0,0,0,random(-1,1));
				}
				A_FireProjectile("BlunderShot",random(-3,3),0,0,0,0,random(1,1));
				A_FireProjectile("BlunderShot",random(-5,5),0,0,0,0,random(-1,1));
				A_FireProjectile("BlunderShot",random(-7,7),1,0,0,0,random(-1,1));
			}
			BLAX C 3 Bright
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) 
				{
					A_Recoil(frandom(0.96,1.44));
					A_SetTics(random(1,2));
				} 
				else 
				{
					A_Recoil(frandom(4.8,7.2)); 
				}
			}
			BLAX DE 2 
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(randompick(0,1,1,2)); }
			}
			BLAX FF 7
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(random(3,4)); }
			}
			BLAX D 8
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(random(3,5)); }
			}
			BLAX A 9 
			{
				A_Refire();
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_SetTics(random(4,5)); }
			}
			goto Ready;
	}
}

//SUPERVAC
class SuperVac : DDWeapon replaces PlasmaRifle
{
	default
	{
		//$Category RPWeapons
		Weapon.SelectionOrder 900;
		Weapon.SlotNumber 6;
		Weapon.Kickback 0;
		Weapon.AmmoType2 "VacAmmo";
		Weapon.AmmoGive2 0;
		Weapon.AmmoUse2 8;
		+WEAPON.MELEEWEAPON
		+PUFFONACTORS
		Inventory.Icon "VACMP0";
		Inventory.Pickupsound "DinahWeap";
		Inventory.PickupMessage "SuperVac";
		inventory.pickupsound "misc/w_pkup"; //"Dinah/marvelous"
		Tag "SuperVac";
		Obituary "%o sucks.";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("SuperVac",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("VacAmmo",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
					bCOUNTITEM = false;
					Thing_Remove(0); 
				}
			}
			VACM P 1;
			Loop;
		Ready:
			VACM A 1 A_WeaponReady();
			loop;
		Deselect:
			VACM A 1
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_Lower(12); }
				A_Lower(12);
			}
			loop;
		Select: 
			VACM A 1
			{
				if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1)) { A_Raise(12); }
				A_Raise(12);
			}
			loop;
		Full:
			VACM A 0 A_StartSound("VacEmpty",CHAN_WEAPON);
			VACM AB 2;
			Goto Ready;
		Fire:
			VACM A 0
			{
				if (CountInv("BackPack",AAPTR_PLAYER1) || CountInv("BackPackNew",AAPTR_PLAYER1))
				{
					if (CountInv("VacAmmo",AAPTR_PLAYER1) >= 24) { return resolvestate("Full"); }
					return resolvestate(null);
				}
				else
				{
					if (CountInv("VacAmmo",AAPTR_PLAYER1) >= 16) { return resolvestate("Full"); }
					return resolvestate(null);
				}
				return resolvestate(null);
			}
			VACM B 0 A_StartSound("VacSuck");
			VACM BA 2
			{
				if (random(1,16) == 1)
				{
					if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1))
					{
						A_CustomPunch((Random(3,6)*1.25), FALSE, 0, "VacPuff", 80, frandompick(0.01,0.05,0.1));
					}
					else
					{
						A_CustomPunch(Random(3,6), FALSE, 0, "VacPuff", 80, frandompick(0.01,0.05,0.1));
					}
				}
				else
				{
					if (CountInv("PowerStrength",AAPTR_PLAYER1) || CountInv("PowerStrengthDD",AAPTR_PLAYER1))
					{
						A_CustomPunch((Random(3,6)*1.25), FALSE, 0, "VacPuff", 80);
					}
					else
					{
						A_CustomPunch(Random(3,6), FALSE, 0, "VacPuff", 80);
					}
				}
			}
			goto Ready;
		AltFire:
			VACM B 4 A_StartSound("VacDed",CHAN_WEAPON);
			VACM C 4
			{
				A_FireProjectile("VacShot",15,0,0,0);
				A_FireProjectile("VacShot",0,12,0,0);
				A_FireProjectile("VacShot",-15,0,0,0);
			}
			VACM B 3;
			VACM A 3;
			goto Ready;
	}
}